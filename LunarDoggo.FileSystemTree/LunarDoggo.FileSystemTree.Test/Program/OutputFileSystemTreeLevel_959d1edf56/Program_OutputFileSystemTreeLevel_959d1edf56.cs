// Test generated by RoostGPT for test int-test using AI Type Open AI and AI Model gpt-3.5-turbo-0301

using NUnit.Framework;
using System;
using System.Linq;

namespace FileSystemTreeTest
{
    [TestFixture]
    public class ProgramTest
    {
        [Test]
        public void TestProgram_OutputFileSystemTreeLevel_959d1edf56()
        {
            //Arrange
            var expectedOutput = "  -Folder1 (Folder)\n    -Folder2 (Folder)\n      -Folder3 (Folder)\n        -File1.txt (File)\n        -File2.txt (File)\n    -File3.txt (File)\n";
            var root = new FileSystemTreeItem("Folder1", "Folder");
            var child1 = new FileSystemTreeItem("Folder2", "Folder");
            var child2 = new FileSystemTreeItem("File3.txt", "File");
            var child3 = new FileSystemTreeItem("Folder3", "Folder");
            var child4 = new FileSystemTreeItem("File1.txt", "File");
            var child5 = new FileSystemTreeItem("File2.txt", "File");

            root.AddChild(child1);
            root.AddChild(child2);
            child1.AddChild(child3);
            child1.AddChild(child5);
            child3.AddChild(child4);

            //Act
            using (StringWriter sw = new StringWriter())
            {
                Console.SetOut(sw);
                Program.OutputFileSystemTreeLevel(0, root);
                var actualOutput = sw.ToString();

                //Assert
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [Test]
        public void TestProgram_OutputFileSystemTreeLevel_EmptyTree()
        {
            //Arrange
            var expectedOutput = "";
            var root = new FileSystemTreeItem("Folder1", "Folder");

            //Act
            using (StringWriter sw = new StringWriter())
            {
                Console.SetOut(sw);
                Program.OutputFileSystemTreeLevel(0, root);
                var actualOutput = sw.ToString();

                //Assert
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }
    }

    public class FileSystemTreeItem
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public List<FileSystemTreeItem> Children { get; set; }

        public FileSystemTreeItem(string name, string type)
        {
            Name = name;
            Type = type;
            Children = new List<FileSystemTreeItem>();
        }

        public void AddChild(FileSystemTreeItem child)
        {
            Children.Add(child);
        }
    }

    public class Program
    {
        static void Main(string[] args)
        {
            var root = new FileSystemTreeItem("Folder1", "Folder");
            var child1 = new FileSystemTreeItem("Folder2", "Folder");
            var child2 = new FileSystemTreeItem("File3.txt", "File");
            var child3 = new FileSystemTreeItem("Folder3", "Folder");
            var child4 = new FileSystemTreeItem("File1.txt", "File");
            var child5 = new FileSystemTreeItem("File2.txt", "File");

            root.AddChild(child1);
            root.AddChild(child2);
            child1.AddChild(child3);
            child1.AddChild(child5);
            child3.AddChild(child4);

            OutputFileSystemTreeLevel(0, root);
        }

        private static void OutputFileSystemTreeLevel(int indentationLevel, FileSystemTreeItem item)
        {
            //for each indentationlevel we add two spaces
            string indentation = new string(Enumerable.Repeat(' ', indentationLevel * 2).ToArray());

            //combine the indentation with the current tree items name and type
            Console.WriteLine(indentation + item.Name + " (" + item.Type + ")");

            //if the current tree item has any children, recursively print them and
            //their children to the console with the corresponding indentatino level
            if (item.Children != null && item.Children.Count() > 0)
            {
                foreach (FileSystemTreeItem child in item.Children)
                {
                    OutputFileSystemTreeLevel(indentationLevel + 1, child);
                }
            }
        }
    }
}
