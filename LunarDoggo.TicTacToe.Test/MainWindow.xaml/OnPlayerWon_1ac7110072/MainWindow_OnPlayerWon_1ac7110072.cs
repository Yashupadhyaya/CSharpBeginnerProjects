// Test generated by RoostGPT for test demo56 using AI Type Open AI and AI Model gpt-4

using System;
using NUnit.Framework;
using Moq;
using TicTacToe;
using TicTacToe.Services;
using TicTacToe.Models;
using TicTacToe.Controls;
using TicTacToe.Windows;

namespace TicTacToeTests
{
    [TestFixture]
    public class MainWindowTests
    {
        private Mock<IMessageBoxService> _messageBoxServiceMock;
        private MainWindow _mainWindow;

        [SetUp]
        public void SetUp()
        {
            _messageBoxServiceMock = new Mock<IMessageBoxService>();
            _mainWindow = new MainWindow(_messageBoxServiceMock.Object);
        }

        [Test]
        public void TestMainWindow_OnPlayerWon_1ac7110072()
        {
            // Arrange
            var playerEventArgs = new PlayerEventArgs
            {
                Player = new Player { Id = 1 }
            };
            _messageBoxServiceMock.Setup(x => x.Show(It.IsAny<string>(), It.IsAny<string>(), MessageBoxButton.YesNo, MessageBoxImage.Question, MessageBoxResult.Yes)).Returns(MessageBoxResult.Yes);

            // Act
            _mainWindow.OnPlayerWon(this, playerEventArgs);

            // Assert
            _messageBoxServiceMock.Verify(x => x.Show($"Player {playerEventArgs.Player.Id} won the game. Do you want to play again?", "GameOver", MessageBoxButton.YesNo, MessageBoxImage.Question, MessageBoxResult.Yes), Times.Once);
            _messageBoxServiceMock.Verify(x => x.ProcessGameOverPlayerChoice(MessageBoxResult.Yes), Times.Once);
        }

        [Test]
        public void TestMainWindow_OnPlayerWon_NoPlayAgain()
        {
            // Arrange
            var playerEventArgs = new PlayerEventArgs
            {
                Player = new Player { Id = 1 }
            };
            _messageBoxServiceMock.Setup(x => x.Show(It.IsAny<string>(), It.IsAny<string>(), MessageBoxButton.YesNo, MessageBoxImage.Question, MessageBoxResult.Yes)).Returns(MessageBoxResult.No);

            // Act
            _mainWindow.OnPlayerWon(this, playerEventArgs);

            // Assert
            _messageBoxServiceMock.Verify(x => x.Show($"Player {playerEventArgs.Player.Id} won the game. Do you want to play again?", "GameOver", MessageBoxButton.YesNo, MessageBoxImage.Question, MessageBoxResult.Yes), Times.Once);
            _messageBoxServiceMock.Verify(x => x.ProcessGameOverPlayerChoice(MessageBoxResult.No), Times.Once);
        }
    }
}
