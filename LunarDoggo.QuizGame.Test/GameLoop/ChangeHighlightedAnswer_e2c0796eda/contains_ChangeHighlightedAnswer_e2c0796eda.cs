// Test generated by RoostGPT for test test-csrepo using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using Moq;
using LunarDoggo.QuizGame;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class ChangeHighlightedAnswerTest
    {
        private Mock<IQuizState> mockState;

        [SetUp]
        public void Setup()
        {
            this.mockState = new Mock<IQuizState>();
        }

        [Test]
        public void ChangeHighlightedAnswer_StateHasCurrentQuestionAndNotAnswered_UpTrue_HighlightPreviousAnswerCalled()
        {
            // Arrange
            this.mockState.Setup(s => s.CurrentQuestion).Returns(new Question());
            this.mockState.Setup(s => s.IsCurrentQuestionAnswered).Returns(false);
            var quiz = new Quiz(this.mockState.Object);
            
            // Act
            quiz.ChangeHighlightedAnswer(true);

            // Assert
            this.mockState.Verify(s => s.HighlightPreviousAnswer(), Times.Once);
        }

        [Test]
        public void ChangeHighlightedAnswer_StateHasCurrentQuestionAndNotAnswered_UpFalse_HighlightNextAnswerCalled()
        {
            // Arrange
            this.mockState.Setup(s => s.CurrentQuestion).Returns(new Question());
            this.mockState.Setup(s => s.IsCurrentQuestionAnswered).Returns(false);
            var quiz = new Quiz(this.mockState.Object);
            
            // Act
            quiz.ChangeHighlightedAnswer(false);

            // Assert
            this.mockState.Verify(s => s.HighlightNextAnswer(), Times.Once);
        }

        [Test]
        public void ChangeHighlightedAnswer_StateHasNoCurrentQuestion_NoHighlightChange()
        {
            // Arrange
            this.mockState.Setup(s => s.CurrentQuestion).Returns((Question)null);
            var quiz = new Quiz(this.mockState.Object);
            
            // Act
            quiz.ChangeHighlightedAnswer(true);

            // Assert
            this.mockState.Verify(s => s.HighlightPreviousAnswer(), Times.Never);
            this.mockState.Verify(s => s.HighlightNextAnswer(), Times.Never);
        }

        [Test]
        public void ChangeHighlightedAnswer_StateHasCurrentQuestionAndAnswered_NoHighlightChange()
        {
            // Arrange
            this.mockState.Setup(s => s.CurrentQuestion).Returns(new Question());
            this.mockState.Setup(s => s.IsCurrentQuestionAnswered).Returns(true);
            var quiz = new Quiz(this.mockState.Object);
            
            // Act
            quiz.ChangeHighlightedAnswer(false);

            // Assert
            this.mockState.Verify(s => s.HighlightPreviousAnswer(), Times.Never);
            this.mockState.Verify(s => s.HighlightNextAnswer(), Times.Never);
        }
    }
}
