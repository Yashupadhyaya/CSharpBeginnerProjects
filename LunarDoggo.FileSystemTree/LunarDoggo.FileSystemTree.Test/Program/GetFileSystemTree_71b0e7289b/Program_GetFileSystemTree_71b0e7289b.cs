// Test generated by RoostGPT for test unt-test using AI Type Azure Open AI and AI Model roost-gpt

using NUnit.Framework;
using System.Collections.Generic;
using System.Collections.Immutable;
using LunarDoggo.FileSystemTree.Tests;

namespace LunarDoggo.FileSystemTree.Tests
{
    [TestFixture]
    public class FileSystemTreeTests
    {
        [Test]
        public void TestGetFileSystemTree_ReturnsCorrectTreeItem_ForValidDirectory()
        {
            // Arrange
            var baseDirectory = new DirectoryInfo("C:\\Program Files");

            // Act
            var result = Program.GetFileSystemTree(baseDirectory);

            // Assert
            Assert.That(result.Name, Is.EqualTo(baseDirectory.Name));
            Assert.That(result.Type, Is.EqualTo(FileSystemTreeItemType.Directory));
            Assert.That(result.Children.Length, Is.GreaterThan(0));
            Assert.That(result.Children.Length, Is.EqualTo(GetExpectedSubdirectoryCount(baseDirectory)));
            Assert.IsTrue(AreAllChildrenDirectories(result));
        }

        [Test]
        public void TestGetFileSystemTree_ReturnsEmptyTreeItem_ForEmptyDirectory()
        {
            // Arrange
            var baseDirectory = new DirectoryInfo("C:\\EmptyDirectory");

            // Act
            var result = Program.GetFileSystemTree(baseDirectory);

            // Assert
            Assert.That(result.Name, Is.EqualTo(baseDirectory.Name));
            Assert.That(result.Type, Is.EqualTo(FileSystemTreeItemType.Directory));
            Assert.That(result.Children.Length, Is.EqualTo(0));
        }

        private int GetExpectedSubdirectoryCount(DirectoryInfo directory)
        {
            int count = 0;
            DirectoryInfo[] subdirectories = directory.GetDirectories();

            foreach (DirectoryInfo subdirectory in subdirectories)
            {
                count += GetExpectedSubdirectoryCount(subdirectory) + 1;
            }

            return count;
        }

        private bool AreAllChildrenDirectories(FileSystemTreeItem treeItem)
        {
            foreach (var child in treeItem.Children)
            {
                if (child.Type != FileSystemTreeItemType.Directory)
                {
                    return false;
                }
            }

            return true;
        }
    }
}
