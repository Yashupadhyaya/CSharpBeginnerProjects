// Test generated by RoostGPT for test unt-test using AI Type Azure Open AI and AI Model roost-gpt

using NUnit.Framework;
using System;
using System.Collections.Generic;

namespace YourTestProjectNamespace
{
    public class MyClassTests
    {
        private MyClass myClass;

        [SetUp]
        public void Setup()
        {
            myClass = new MyClass();
        }

        [Test]
        public void SetGuids_ShouldSetGuidsForQuestionsAndAnswers()
        {
            // Arrange
            var questions = new List<QuizQuestion>
            {
                new QuizQuestion
                {
                    Id = Guid.Empty,
                    Answers = new List<QuizQuestionAnswer>
                    {
                        new QuizQuestionAnswer { Id = Guid.Empty }
                    }
                },
                new QuizQuestion
                {
                    Id = Guid.Empty,
                    Answers = new List<QuizQuestionAnswer>
                    {
                        new QuizQuestionAnswer { Id = Guid.Empty },
                        new QuizQuestionAnswer { Id = Guid.Empty }
                    }
                }
            };

            // Act
            myClass.SetGuids(questions);

            // Assert
            Assert.AreNotEqual(Guid.Empty, questions[0].Id);
            Assert.AreNotEqual(Guid.Empty, questions[0].Answers[0].Id);

            Assert.AreNotEqual(Guid.Empty, questions[1].Id);
            Assert.AreNotEqual(Guid.Empty, questions[1].Answers[0].Id);
            Assert.AreNotEqual(Guid.Empty, questions[1].Answers[1].Id);
        }

        [TearDown]
        public void TearDown()
        {
            // Clean up any resources (e.g., file handles, network connections)
            // that were used during the test
        }
    }

    public class MyClass
    {
        public void SetGuids(IEnumerable<QuizQuestion> questions)
        {
            foreach (QuizQuestion question in questions)
            {
                question.Id = Guid.NewGuid();
                foreach (QuizQuestionAnswer answer in question.Answers)
                {
                    answer.Id = Guid.NewGuid();
                }
            }
        }
    }

    public class QuizQuestion
    {
        public Guid Id { get; set; }
        public List<QuizQuestionAnswer> Answers { get; set; }
    }

    public class QuizQuestionAnswer
    {
        public Guid Id { get; set; }
    }
}
