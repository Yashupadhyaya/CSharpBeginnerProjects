// Test generated by RoostGPT for test roost-test using AI Model gpt

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using NUnit.Framework;
using LunarDoggo.FileSystemTree;

namespace LunarDoggo.FileSystemTree.Tests
{
    [TestFixture]
    public class FileSystemTreeTests
    {
        private class StringWriterWithConsoleOutput : StringWriter
        {
            public override void WriteLine(string value)
            {
                Console.WriteLine(value);
                base.WriteLine(value);
            }
        }

        [Test]
        public void TestProgram_OutputFileSystemTreeLevel_9fe43fbdc7()
        {
            // Arrange
            var root = new FileSystemTreeItem("Root", "Folder", new List<FileSystemTreeItem>
            {
                new FileSystemTreeItem("Child1", "Folder", new List<FileSystemTreeItem>
                {
                    new FileSystemTreeItem("GrandChild1", "File"),
                    new FileSystemTreeItem("GrandChild2", "File")
                }),
                new FileSystemTreeItem("Child2", "File")
            });

            var expectedOutput = "Root (Folder)" + Environment.NewLine +
                                 "  Child1 (Folder)" + Environment.NewLine +
                                 "    GrandChild1 (File)" + Environment.NewLine +
                                 "    GrandChild2 (File)" + Environment.NewLine +
                                 "  Child2 (File)" + Environment.NewLine;

            using (StringWriterWithConsoleOutput sw = new StringWriterWithConsoleOutput())
            {
                Console.SetOut(sw);

                // Act
                OutputFileSystemTreeLevel(0, root);

                // Assert
                Assert.AreEqual(expectedOutput, sw.ToString());
            }
        }

        [Test]
        public void TestProgram_OutputFileSystemTreeLevel_EmptyTree()
        {
            // Arrange
            var root = new FileSystemTreeItem("Root", "Folder");

            var expectedOutput = "Root (Folder)" + Environment.NewLine;

            using (StringWriterWithConsoleOutput sw = new StringWriterWithConsoleOutput())
            {
                Console.SetOut(sw);

                // Act
                OutputFileSystemTreeLevel(0, root);

                // Assert
                Assert.AreEqual(expectedOutput, sw.ToString());
            }
        }

        private static void OutputFileSystemTreeLevel(int indentationLevel, FileSystemTreeItem item)
        {
            //for each indentationlevel we add two spaces
            string indentation = new string(Enumerable.Repeat(' ', indentationLevel * 2).ToArray());

            //combine the indentation with the current tree items name and type
            Console.WriteLine(indentation + item.Name + " (" + item.Type + ")");

            //if the current tree item has any children, recursively print them and
            //their children to the console with the corresponding indentatino level
            if (item.Children != null && item.Children.Count() > 0)
            {
                foreach (FileSystemTreeItem child in item.Children)
                {
                    OutputFileSystemTreeLevel(indentationLevel + 1, child);
                }
            }
        }
    }

    public class FileSystemTreeItem
    {
        public FileSystemTreeItem(string name, string type, List<FileSystemTreeItem> children = null)
        {
            Name = name;
            Type = type;
            Children = children;
        }

        public string Name { get; set; }
        public string Type { get; set; }
        public List<FileSystemTreeItem> Children { get; set; }
    }
}