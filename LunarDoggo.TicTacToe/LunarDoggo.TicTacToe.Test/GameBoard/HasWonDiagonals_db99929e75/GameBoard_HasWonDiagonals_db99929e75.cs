// Test generated by RoostGPT for test test-dummy using AI Type Open AI and AI Model gpt-4

using System;
using NUnit.Framework;

namespace TicTacToe
{
    public class GameBoard
    {
        public int[,] tiles = new int[3, 3];

        public bool HasWonDiagonals(int player)
        {
            if (tiles[0, 0] == player && tiles[1, 1] == player && tiles[2, 2] == player)
            {
                return true;
            }
            if (tiles[0, 2] == player && tiles[1, 1] == player && tiles[2, 0] == player)
            {
                return true;
            }
            return false;
        }
    }

    [TestFixture]
    public class TicTacToeTests
    {
        private GameBoard _gameBoard;

        [SetUp]
        public void Setup()
        {
            _gameBoard = new GameBoard();
        }

        [Test]
        public void TestGameBoard_HasWonDiagonals_db99929e75()
        {
            // Test case for player 1 winning diagonally from top-left to bottom-right
            _gameBoard.tiles[0, 0] = 1;
            _gameBoard.tiles[1, 1] = 1;
            _gameBoard.tiles[2, 2] = 1;
            Assert.IsTrue(_gameBoard.HasWonDiagonals(1));

            // Test case for player 2 winning diagonally from top-right to bottom-left
            _gameBoard.tiles[0, 2] = 2;
            _gameBoard.tiles[1, 1] = 2;
            _gameBoard.tiles[2, 0] = 2;
            Assert.IsTrue(_gameBoard.HasWonDiagonals(2));

            // Test case for no player winning diagonally
            _gameBoard.tiles[0, 0] = 1;
            _gameBoard.tiles[1, 1] = 2;
            _gameBoard.tiles[2, 2] = 1;
            _gameBoard.tiles[0, 2] = 2;
            _gameBoard.tiles[2, 0] = 1;
            Assert.IsFalse(_gameBoard.HasWonDiagonals(1));
            Assert.IsFalse(_gameBoard.HasWonDiagonals(2));
        }
    }
}
