// Test generated by RoostGPT for test int-test using AI Type Open AI and AI Model gpt-3.5-turbo-0301

using NUnit.Framework;
using LunarDoggo.FileSystemTree;
using System.Collections.Immutable;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;

namespace LunarDoggo.FileSystemTree
{
    [TestFixture]
    public class TestFileSystemTree
    {
        private static string testDirectoryPath = Path.Combine(Environment.CurrentDirectory, "TestDirectory");

        [SetUp]
        public void Setup()
        {
            // Create the directory structure for testing
            Directory.CreateDirectory(testDirectoryPath);
            Directory.CreateDirectory(Path.Combine(testDirectoryPath, "Subdirectory"));
            File.Create(Path.Combine(testDirectoryPath, "File.txt"));
            File.Create(Path.Combine(testDirectoryPath, "Subdirectory", "File2.txt"));
        }

        [TearDown]
        public void TearDown()
        {
            // Delete the directory and all files and subdirectories
            Directory.Delete(testDirectoryPath, true);
        }

        [Test]
        public void TestProgram_GetFileSystemTree_71b0e7289b()
        {
            // Arrange
            DirectoryInfo directoryInfo = new DirectoryInfo(testDirectoryPath);

            // Act
            FileSystemTreeItem fileSystemTreeItem = Program.GetFileSystemTree(directoryInfo);

            // Assert
            Assert.AreEqual(fileSystemTreeItem.Name, "TestDirectory");
            Assert.AreEqual(fileSystemTreeItem.Type, FileSystemTreeItemType.Directory);
            Assert.AreEqual(fileSystemTreeItem.Children.Length, 2);
            Assert.AreEqual(fileSystemTreeItem.Children[0].Name, "File.txt");
            Assert.AreEqual(fileSystemTreeItem.Children[0].Type, FileSystemTreeItemType.File);
            Assert.IsNull(fileSystemTreeItem.Children[0].Children);
            Assert.AreEqual(fileSystemTreeItem.Children[1].Name, "Subdirectory");
            Assert.AreEqual(fileSystemTreeItem.Children[1].Type, FileSystemTreeItemType.Directory);
            Assert.AreEqual(fileSystemTreeItem.Children[1].Children.Length, 1);
            Assert.AreEqual(fileSystemTreeItem.Children[1].Children[0].Name, "File2.txt");
            Assert.AreEqual(fileSystemTreeItem.Children[1].Children[0].Type, FileSystemTreeItemType.File);
            Assert.IsNull(fileSystemTreeItem.Children[1].Children[0].Children);
        }

        [Test]
        public void TestProgram_GetFileSystemTree_71b0e7289b_DirectoryNotFoundException()
        {
            // Arrange
            DirectoryInfo directoryInfo = new DirectoryInfo("NonExistentDirectory");

            // Act and Assert
            Assert.Throws<DirectoryNotFoundException>(() => Program.GetFileSystemTree(directoryInfo));
        }
    }
}
