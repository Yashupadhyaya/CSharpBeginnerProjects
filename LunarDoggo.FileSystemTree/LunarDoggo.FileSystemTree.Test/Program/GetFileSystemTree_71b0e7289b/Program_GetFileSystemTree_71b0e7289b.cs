// Test generated by RoostGPT for test unt-test using AI Type Azure Open AI and AI Model roost-gpt

using System;
using System.Collections.Immutable;
using System.Collections.Generic;
using System.IO;
using LunarDoggo.FileSystemTree;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace LunarDoggo.FileSystemTree.Tests
{
    [TestClass]
    public class FileSystemTreeTests
    {
        [TestMethod]
        public void TestGetFileSystemTree_Success()
        {
            // Arrange
            string tempDirectory = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
            DirectoryInfo baseDirectory = Directory.CreateDirectory(tempDirectory);

            // Act
            FileSystemTreeItem result = Program.GetFileSystemTree(baseDirectory);

            // Assert
            Assert.AreEqual(baseDirectory.Name, result.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);
            Assert.IsNotNull(result.Children);
            Assert.AreEqual(0, result.Children.Length);

            // Clean up
            Directory.Delete(tempDirectory, true);
        }

        [TestMethod]
        public void TestGetFileSystemTree_WithSubdirectoriesAndFiles()
        {
            // Arrange
            string tempDirectory = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
            DirectoryInfo baseDirectory = Directory.CreateDirectory(tempDirectory);

            DirectoryInfo subdirectory1 = Directory.CreateDirectory(Path.Combine(tempDirectory, "Subdirectory1"));
            DirectoryInfo subdirectory2 = Directory.CreateDirectory(Path.Combine(tempDirectory, "Subdirectory2"));

            FileInfo file1 = new FileInfo(Path.Combine(tempDirectory, "File1.txt"));
            file1.Create().Dispose();
            FileInfo file2 = new FileInfo(Path.Combine(subdirectory1.FullName, "File2.txt"));
            file2.Create().Dispose();
            FileInfo file3 = new FileInfo(Path.Combine(subdirectory2.FullName, "File3.txt"));
            file3.Create().Dispose();

            // Act
            FileSystemTreeItem result = Program.GetFileSystemTree(baseDirectory);

            // Assert
            Assert.AreEqual(baseDirectory.Name, result.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);
            Assert.IsNotNull(result.Children);
            Assert.AreEqual(2, result.Children.Length);

            // Check subdirectories
            FileSystemTreeItem subdirectory1Item = result.Children[0];
            Assert.AreEqual(subdirectory1.Name, subdirectory1Item.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, subdirectory1Item.Type);
            Assert.IsNotNull(subdirectory1Item.Children);
            Assert.AreEqual(1, subdirectory1Item.Children.Length);

            FileSystemTreeItem subdirectory2Item = result.Children[1];
            Assert.AreEqual(subdirectory2.Name, subdirectory2Item.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, subdirectory2Item.Type);
            Assert.IsNotNull(subdirectory2Item.Children);
            Assert.AreEqual(1, subdirectory2Item.Children.Length);

            // Check files
            FileSystemTreeItem file1Item = subdirectory1Item.Children[0];
            Assert.AreEqual(file1.Name, file1Item.Name);
            Assert.AreEqual(FileSystemTreeItemType.File, file1Item.Type);
            Assert.IsNull(file1Item.Children);

            FileSystemTreeItem file3Item = subdirectory2Item.Children[0];
            Assert.AreEqual(file3.Name, file3Item.Name);
            Assert.AreEqual(FileSystemTreeItemType.File, file3Item.Type);
            Assert.IsNull(file3Item.Children);

            // Clean up
            Directory.Delete(tempDirectory, true);
        }
    }
}
