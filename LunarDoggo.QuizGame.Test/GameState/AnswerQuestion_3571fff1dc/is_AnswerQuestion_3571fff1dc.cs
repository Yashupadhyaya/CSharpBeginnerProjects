// Test generated by RoostGPT for test demo5 using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using LunarDoggo.QuizGame;
using System.Collections.Generic;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class is_AnswerQuestion_3571fff1dc
    {
        private QuizGameController _quizGameController;
        private QuizQuestion _quizQuestion;
        private QuizQuestionAnswer _quizQuestionAnswer;

        [SetUp]
        public void Setup()
        {
            _quizQuestionAnswer = new QuizQuestionAnswer { IsCorrect = true };
            _quizQuestion = new QuizQuestion { Answers = new List<QuizQuestionAnswer> { _quizQuestionAnswer } };
            _quizGameController = new QuizGameController();
        }

        [Test]
        public void AnswerQuestion_WhenCalled_SetsIsCurrentQuestionAnsweredToTrue()
        {
            _quizGameController.CurrentQuestion = _quizQuestion;
            _quizGameController.AnswerQuestion();
            Assert.IsTrue(_quizGameController.IsCurrentQuestionAnswered);
        }

        [Test]
        public void AnswerQuestion_WhenCalled_SetsChosenAnswer()
        {
            _quizGameController.CurrentQuestion = _quizQuestion;
            _quizGameController.AnswerQuestion();
            Assert.AreEqual(_quizQuestionAnswer, _quizGameController.ChosenAnswer);
        }

        [Test]
        public void AnswerQuestion_WhenCalled_RemovesCurrentQuestionFromUnansweredQuestions()
        {
            _quizGameController.CurrentQuestion = _quizQuestion;
            _quizGameController.unansweredQuestions.Add(_quizQuestion);
            _quizGameController.AnswerQuestion();
            Assert.IsFalse(_quizGameController.unansweredQuestions.Contains(_quizQuestion));
        }

        [Test]
        public void AnswerQuestion_WhenCalled_AddsCurrentQuestionToGivenAnswers()
        {
            _quizGameController.CurrentQuestion = _quizQuestion;
            _quizGameController.AnswerQuestion();
            Assert.IsTrue(_quizGameController.givenAnswers.ContainsKey(_quizQuestion));
        }

        [Test]
        public void AnswerQuestion_WhenCurrentQuestionIsNull_DoesNotThrowException()
        {
            _quizGameController.CurrentQuestion = null;
            Assert.DoesNotThrow(() => _quizGameController.AnswerQuestion());
        }
    }
}
