// Test generated by RoostGPT for test test-csrepo using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using Moq;
using LunarDoggo.QuizGame;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class contains_UpdateScreen_7c178b7f99
    {
        private Mock<IVisualizer> visualizerMock;
        private QuizState state;
        private QuizGame game;

        [SetUp]
        public void Setup()
        {
            this.visualizerMock = new Mock<IVisualizer>();
            this.state = new QuizState();
            this.game = new QuizGame(this.visualizerMock.Object, this.state);
        }

        [Test]
        public void UpdateScreen_GameNotStarted_DrawGameStartCalled()
        {
            this.game.UpdateScreen();

            this.visualizerMock.Verify(v => v.DrawGameStart(It.IsAny<int>()), Times.Once);
        }

        [Test]
        public void UpdateScreen_GameStartedWithUnansweredQuestion_DrawQuizQuestionCalled()
        {
            this.state.IsStarted = true;
            this.state.CurrentQuestion = new QuizQuestion();

            this.game.UpdateScreen();

            this.visualizerMock.Verify(v => v.DrawQuizQuestion(It.IsAny<QuizQuestion>(), It.IsAny<int>()), Times.Once);
        }

        [Test]
        public void UpdateScreen_GameStartedWithAnsweredQuestion_DrawAnswerStatusCalled()
        {
            this.state.IsStarted = true;
            this.state.CurrentQuestion = new QuizQuestion();
            this.state.IsCurrentQuestionAnswered = true;

            this.game.UpdateScreen();

            this.visualizerMock.Verify(v => v.DrawAnswerStatus(It.IsAny<bool>(), It.IsAny<string>()), Times.Once);
        }

        [Test]
        public void UpdateScreen_GameStartedWithNoUnansweredQuestions_DrawGameResultCalled()
        {
            this.state.IsStarted = true;
            this.state.HasUnansweredQuestions = false;

            this.game.UpdateScreen();

            this.visualizerMock.Verify(v => v.DrawGameResult(It.IsAny<int>(), It.IsAny<int>()), Times.Once);
        }
    }
}
