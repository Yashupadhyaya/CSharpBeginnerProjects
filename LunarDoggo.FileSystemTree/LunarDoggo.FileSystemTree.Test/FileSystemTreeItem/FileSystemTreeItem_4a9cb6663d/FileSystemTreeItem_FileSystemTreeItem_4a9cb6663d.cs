// Test generated by RoostGPT for test unt-test using AI Type Azure Open AI and AI Model roost-gpt

using NUnit.Framework;
using System.Collections.Generic;
using LunarDoggo.FileSystemTree.Tests; // <-- import FileSystemTree class

namespace LunarDoggo.FileSystemTree.Tests
{
    [TestFixture]
    public class FileSystemTreeItemTests
    {
        [Test]
        public void TestFileSystemTreeItem_WithValidArguments_ShouldCreateInstance()
        {
            // Arrange
            string name = "Folder1";
            FileSystemTreeItemType type = FileSystemTreeItemType.Folder;
            IEnumerable<FileSystemTreeItem> children = new List<FileSystemTreeItem>()
            {
                new FileSystemTreeItem("File1.txt", FileSystemTreeItemType.File, null),
                new FileSystemTreeItem("File2.txt", FileSystemTreeItemType.File, null)
            };
            
            // Act
            var treeItem = new FileSystemTreeItem(name, type, children);
            
            // Assert
            Assert.IsNotNull(treeItem);
            Assert.AreEqual(name, treeItem.Name);
            Assert.AreEqual(type, treeItem.Type);
            Assert.AreEqual(children, treeItem.Children);
        }
        
        [Test]
        public void TestFileSystemTreeItem_WithNullName_ShouldThrowArgumentNullException()
        {
            // Arrange
            string name = null;
            FileSystemTreeItemType type = FileSystemTreeItemType.Folder;
            IEnumerable<FileSystemTreeItem> children = null;
            
            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => new FileSystemTreeItem(name, type, children));
        }
        
        [Test]
        public void TestFileSystemTreeItem_WithEmptyChildren_ShouldCreateInstanceWithEmptyChildren()
        {
            // Arrange
            string name = "Folder1";
            FileSystemTreeItemType type = FileSystemTreeItemType.Folder;
            IEnumerable<FileSystemTreeItem> children = new List<FileSystemTreeItem>();
            
            // Act
            var treeItem = new FileSystemTreeItem(name, type, children);
            
            // Assert
            Assert.IsNotNull(treeItem);
            Assert.AreEqual(name, treeItem.Name);
            Assert.AreEqual(type, treeItem.Type);
            Assert.IsEmpty(treeItem.Children);
        }
    }
}
