// Test regenerated by AI to fix the compilation errors

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Collections.Immutable;
using NUnit.Framework;

namespace LunarDoggo.FileSystemTree.Tests
{
    public class FileSystemTreeItem
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public List<FileSystemTreeItem> Children { get; set; }

        public FileSystemTreeItem(string name, string type, List<FileSystemTreeItem> children)
        {
            this.Name = name;
            this.Type = type;
            this.Children = children;
        }
    }

    public static class Program
    {
        public static void OutputFileSystemTreeLevel(int level, FileSystemTreeItem item)
        {
            Console.WriteLine(new String(' ', level * 2) + item.Name + " (" + item.Type + ")");
            if (item.Children != null)
            {
                foreach (var child in item.Children)
                {
                    OutputFileSystemTreeLevel(level + 1, child);
                }
            }
        }
    }

    [TestFixture]
    public class ProgramTests
    {
        [Test]
        public void TestProgram_OutputFileSystemTreeLevel_9fe43fbdc7()
        {
            var item = new FileSystemTreeItem("Root", "Folder", new List<FileSystemTreeItem>
            {
                new FileSystemTreeItem("Child1", "File", null),
                new FileSystemTreeItem("Child2", "Folder", new List<FileSystemTreeItem>
                {
                    new FileSystemTreeItem("GrandChild1", "File", null)
                })
            });

            using (StringWriter sw = new StringWriter())
            {
                Console.SetOut(sw);

                Program.OutputFileSystemTreeLevel(0, item);

                var result = sw.ToString().Trim();
                var expected = "Root (Folder)\n  Child1 (File)\n  Child2 (Folder)\n    GrandChild1 (File)";

                Assert.AreEqual(expected, result);
            }
        }

        [Test]
        public void TestProgram_OutputFileSystemTreeLevel_NullChildren()
        {
            var item = new FileSystemTreeItem("Root", "Folder", null);

            using (StringWriter sw = new StringWriter())
            {
                Console.SetOut(sw);

                Program.OutputFileSystemTreeLevel(0, item);

                var result = sw.ToString().Trim();
                var expected = "Root (Folder)";

                Assert.AreEqual(expected, result);
            }
        }
    }
}
