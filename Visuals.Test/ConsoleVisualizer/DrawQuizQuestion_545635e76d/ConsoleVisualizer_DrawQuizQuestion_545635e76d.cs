// Test generated by RoostGPT for test demo5 using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using System;
using LunarDoggo.QuizGame.Visuals;
using LunarDoggo.QuizGame.Visuals.Test;
using System.Collections.Generic;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class ConsoleVisualizer_DrawQuizQuestion_545635e76d
    {
        private QuizQuestion _quizQuestion;
        private Guid _highlightedAnswerId;

        [SetUp]
        public void Setup()
        {
            _highlightedAnswerId = Guid.NewGuid();

            _quizQuestion = new QuizQuestion
            {
                Question = "What is the capital of Australia?",
                Answers = new List<QuizQuestionAnswer>
                {
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Sydney" },
                    new QuizQuestionAnswer { Id = _highlightedAnswerId, Answer = "Canberra" },
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Melbourne" }
                }.ToArray() // convert list to array to match the expected type
            };
        }

        [Test]
        public void DrawQuizQuestion_WithHighlightedAnswer_DrawsCorrectly()
        {
            var consoleVisualizer = new ConsoleVisualizer();

            using (var consoleOutput = new StringWriter()) // replace ConsoleOutput with StringWriter
            {
                Console.SetOut(consoleOutput); // redirect console output to StringWriter

                consoleVisualizer.DrawQuizQuestion(_quizQuestion, _highlightedAnswerId);
                var output = consoleOutput.ToString(); // get output from StringWriter

                Assert.IsTrue(output.Contains(_quizQuestion.Question));
                Assert.IsTrue(output.Contains(_quizQuestion.Answers[0].Answer));
                Assert.IsTrue(output.Contains(_quizQuestion.Answers[1].Answer));
                Assert.IsTrue(output.Contains(_quizQuestion.Answers[2].Answer));
            }
        }

        [Test]
        public void DrawQuizQuestion_WithoutHighlightedAnswer_DrawsCorrectly()
        {
            var consoleVisualizer = new ConsoleVisualizer();

            using (var consoleOutput = new StringWriter()) // replace ConsoleOutput with StringWriter
            {
                Console.SetOut(consoleOutput); // redirect console output to StringWriter

                consoleVisualizer.DrawQuizQuestion(_quizQuestion, Guid.Empty);
                var output = consoleOutput.ToString(); // get output from StringWriter

                Assert.IsTrue(output.Contains(_quizQuestion.Question));
                Assert.IsTrue(output.Contains(_quizQuestion.Answers[0].Answer));
                Assert.IsTrue(output.Contains(_quizQuestion.Answers[1].Answer));
                Assert.IsTrue(output.Contains(_quizQuestion.Answers[2].Answer));
            }
        }
    }
}
