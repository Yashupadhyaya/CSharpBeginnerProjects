// Test generated by RoostGPT for test test-csrepo using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using System.Collections.Generic;
using System.Text.Json;
using LunarDoggo.QuizGame.IO;
using System;

namespace LunarDoggo.QuizGame.IO.Test
{
    public class FileQuizQuestionSerializer_DeserializeJson_f83f138c10
    {
        private FileQuizQuestionSerializer _serializer;

        [SetUp]
        public void Setup()
        {
            this._serializer = new FileQuizQuestionSerializer();
        }

        [Test]
        public void DeserializeJson_ValidJson_ReturnsExpectedQuizQuestions()
        {
            // Arrange
            string validJson = "[{\"Question\":\"What is the capital of France?\",\"Answer\":\"Paris\"},{\"Question\":\"What is 2+2?\",\"Answer\":\"4\"}]";

            // Act
            IEnumerable<QuizQuestion> result = this._serializer.DeserializeJson(validJson);

            // Assert
            Assert.AreEqual(2, result.Count);
            Assert.AreEqual("What is the capital of France?", result.First().Question);
            Assert.AreEqual("Paris", result.First().Answer);
            Assert.AreEqual("What is 2+2?", result.Last().Question);
            Assert.AreEqual("4", result.Last().Answer);
        }

        [Test]
        public void DeserializeJson_InvalidJson_ThrowsJsonException()
        {
            // Arrange
            string invalidJson = "[{\"Question\":\"What is the capital of France?\",\"Answer\":\"Paris\",}";

            // Act & Assert
            Assert.Throws<JsonException>(() => this._serializer.DeserializeJson(invalidJson));
        }

        [Test]
        public void DeserializeJson_EmptyJson_ReturnsEmptyQuizQuestions()
        {
            // Arrange
            string emptyJson = "[]";

            // Act
            IEnumerable<QuizQuestion> result = this._serializer.DeserializeJson(emptyJson);

            // Assert
            Assert.AreEqual(0, result.Count);
        }

        [Test]
        public void DeserializeJson_NullJson_ThrowsArgumentNullException()
        {
            // Arrange
            string nullJson = null;

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => this._serializer.DeserializeJson(nullJson));
        }
    }
}
