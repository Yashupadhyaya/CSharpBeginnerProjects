// Test generated by RoostGPT for test test-dummy using AI Type Open AI and AI Model gpt-4

using System.Collections.Immutable;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;
using NUnit.Framework;
using LunarDoggo.FileSystemTree;

namespace LunarDoggo.FileSystemTree.Tests
{
    [TestFixture]
    public class ProgramTests
    {
        [Test]
        public void TestProgram_GetFileSystemTree_fd7daa2836()
        {
            // TODO: replace with a valid directory path for testing
            string directoryPath = "C:\\TestDirectory";
            DirectoryInfo baseDirectory = new DirectoryInfo(directoryPath);

            FileSystemTreeItem tree = Program.GetFileSystemTree(baseDirectory);

            Assert.IsNotNull(tree);
            Assert.AreEqual(baseDirectory.Name, tree.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, tree.Type);

            // TODO: replace with the expected number of children (subdirectories + files) in the base directory
            int expectedChildrenCount = 3;
            Assert.AreEqual(expectedChildrenCount, tree.Children.Count);
        }

        [Test]
        public void TestProgram_GetFileSystemTree_fd7daa2836_NonExistentDirectory()
        {
            // TODO: replace with a non-existent directory path for testing
            string directoryPath = "C:\\NonExistentDirectory";
            DirectoryInfo baseDirectory = new DirectoryInfo(directoryPath);

            var ex = Assert.Throws<DirectoryNotFoundException>(() => Program.GetFileSystemTree(baseDirectory));
            Assert.That(ex.Message, Is.EqualTo("Could not find a part of the path '" + directoryPath + "'."));
        }
    }
}
