// Test generated by RoostGPT for test demo56 using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using LunarDoggo.FileSystemTree;
using LunarDoggo.FileSystemTree.Test;
using System;

namespace LunarDoggo.FileSystemTree.Test
{
    [TestFixture]
    public class Program_GetFileSystemTree_3a7e86db53
    {
        private DirectoryInfo _baseDirectory;
        private FileSystemTreeItem _fileSystemTree;

        [SetUp]
        public void Setup()
        {
            // TODO: replace with a valid directory path
            _baseDirectory = new DirectoryInfo(@"C:\temp");
            _fileSystemTree = Program.GetFileSystemTree(_baseDirectory);
        }

        [Test]
        public void GetFileSystemTree_BaseDirectoryExists_ReturnsCorrectTree()
        {
            Assert.AreEqual(_baseDirectory.Name, _fileSystemTree.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, _fileSystemTree.Type);
            Assert.AreEqual(_baseDirectory.GetDirectories().Length, _fileSystemTree.Children.Count(c => c.Type == FileSystemTreeItemType.Directory));
            Assert.AreEqual(_baseDirectory.GetFiles().Length, _fileSystemTree.Children.Count(c => c.Type == FileSystemTreeItemType.File));
        }

        [Test]
        public void GetFileSystemTree_BaseDirectoryDoesNotExist_ThrowsDirectoryNotFoundException()
        {
            DirectoryInfo invalidDirectory = new DirectoryInfo(@"C:\invalid_directory");
            Assert.Throws<DirectoryNotFoundException>(() => Program.GetFileSystemTree(invalidDirectory));
        }

        [Test]
        public void GetFileSystemTree_BaseDirectoryIsEmpty_ReturnsOnlyDirectoryItem()
        {
            // TODO: replace with a valid empty directory path
            DirectoryInfo emptyDirectory = new DirectoryInfo(@"C:\empty_directory");
            FileSystemTreeItem fileSystemTree = Program.GetFileSystemTree(emptyDirectory);

            Assert.AreEqual(emptyDirectory.Name, fileSystemTree.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, fileSystemTree.Type);
            Assert.AreEqual(0, fileSystemTree.Children.Count());
        }

        [Test]
        public void GetFileSystemTree_BaseDirectoryIsNull_ThrowsArgumentNullException()
        {
            DirectoryInfo nullDirectory = null;
            Assert.Throws<ArgumentNullException>(() => Program.GetFileSystemTree(nullDirectory));
        }
    }
}
