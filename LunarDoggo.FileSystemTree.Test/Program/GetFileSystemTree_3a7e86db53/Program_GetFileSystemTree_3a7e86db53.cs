// Test generated by RoostGPT for test demo56 using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace LunarDoggo.FileSystemTree.Test
{
    public class FileSystemTreeItem
    {
        public string Name { get; set; }
        public FileSystemTreeItemType Type { get; set; }
        public List<FileSystemTreeItem> Children { get; set; }
    }

    public enum FileSystemTreeItemType
    {
        File,
        Directory
    }

    public class FileSystemTreeBuilder
    {
        public static FileSystemTreeItem GetFileSystemTree(DirectoryInfo directory)
        {
            // Implementation goes here
            return null;
        }
    }

    [TestFixture]
    public class Program_GetFileSystemTree_3a7e86db53
    {
        private DirectoryInfo _baseDirectory;
        private FileSystemTreeItem _fileSystemTreeItem;

        [SetUp]
        public void Setup()
        {
            // TODO: Change the directory path as per your system
            _baseDirectory = new DirectoryInfo(@"C:\TestDirectory");
            _fileSystemTreeItem = FileSystemTreeBuilder.GetFileSystemTree(_baseDirectory);
        }

        [Test]
        public void GetFileSystemTree_WhenCalled_ReturnsCorrectDirectoryName()
        {
            Assert.AreEqual(_baseDirectory.Name, _fileSystemTreeItem.Name);
        }

        [Test]
        public void GetFileSystemTree_WhenCalled_ReturnsCorrectItemType()
        {
            Assert.AreEqual(FileSystemTreeItemType.Directory, _fileSystemTreeItem.Type);
        }

        [Test]
        public void GetFileSystemTree_WhenCalled_ReturnsCorrectNumberOfChildren()
        {
            int expectedChildrenCount = _baseDirectory.GetDirectories().Length + _baseDirectory.GetFiles().Length;
            Assert.AreEqual(expectedChildrenCount, _fileSystemTreeItem.Children.Count());
        }

        [Test]
        public void GetFileSystemTree_WhenCalledWithDirectoryHavingNoFilesOrSubdirectories_ReturnsEmptyChildren()
        {
            // TODO: Change the directory path to a directory having no files or subdirectories
            DirectoryInfo emptyDirectory = new DirectoryInfo(@"C:\EmptyDirectory");
            var result = FileSystemTreeBuilder.GetFileSystemTree(emptyDirectory);

            Assert.AreEqual(0, result.Children.Count());
        }

        [Test]
        public void GetFileSystemTree_WhenCalledWithNonExistentDirectory_ThrowsDirectoryNotFoundException()
        {
            // TODO: Change the directory path to a non-existent directory
            DirectoryInfo nonExistentDirectory = new DirectoryInfo(@"C:\NonExistentDirectory");
            
            Assert.Throws<DirectoryNotFoundException>(() => FileSystemTreeBuilder.GetFileSystemTree(nonExistentDirectory));
        }
    }
}
