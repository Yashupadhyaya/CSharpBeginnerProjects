// ********RoostGPT********
// Test generated by RoostGPT for test csharp-testing using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using NUnit.Framework;
using LunarDoggo.FileSystemTree;

namespace LunarDoggo.FileSystemTree.Test
{
    [TestFixture]
    public class GetFileSystemTree_3a7e86db53
    {
        private string _tempDirectoryPath;

        [SetUp]
        public void SetUp()
        {
            // TODO: Set a valid temp directory path
            _tempDirectoryPath = @"C:\temp";
        }

        [Test]
        public void GetFileSystemTree_ValidDirectory_ReturnsCorrectTree()
        {
            DirectoryInfo baseDirectory = new DirectoryInfo(_tempDirectoryPath);
            FileSystemTreeItem tree = Program.GetFileSystemTree(baseDirectory);

            Assert.AreEqual(baseDirectory.Name, tree.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, tree.Type);
            Assert.AreEqual(baseDirectory.GetDirectories().Length, tree.Children.Count(x => x.Type == FileSystemTreeItemType.Directory));
            Assert.AreEqual(baseDirectory.GetFiles().Length, tree.Children.Count(x => x.Type == FileSystemTreeItemType.File));
        }

        [Test]
        public void GetFileSystemTree_InvalidDirectory_ThrowsDirectoryNotFoundException()
        {
            DirectoryInfo baseDirectory = new DirectoryInfo("InvalidDirectoryPath");

            Assert.Throws<DirectoryNotFoundException>(() => Program.GetFileSystemTree(baseDirectory));
        }

        [Test]
        public void GetFileSystemTree_EmptyDirectory_ReturnsTreeWithNoChildren()
        {
            DirectoryInfo baseDirectory = new DirectoryInfo(_tempDirectoryPath);
            if (baseDirectory.GetDirectories().Length != 0 || baseDirectory.GetFiles().Length != 0)
            {
                Assert.Ignore("The test directory is not empty.");
            }

            FileSystemTreeItem tree = Program.GetFileSystemTree(baseDirectory);

            Assert.AreEqual(baseDirectory.Name, tree.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, tree.Type);
            Assert.AreEqual(0, tree.Children.Count);
        }

        [Test]
        public void GetFileSystemTree_DirectoryWithOnlyFiles_ReturnsTreeWithFileChildrenOnly()
        {
            DirectoryInfo baseDirectory = new DirectoryInfo(_tempDirectoryPath);
            if (baseDirectory.GetDirectories().Length != 0)
            {
                Assert.Ignore("The test directory contains subdirectories.");
            }

            FileSystemTreeItem tree = Program.GetFileSystemTree(baseDirectory);

            Assert.AreEqual(baseDirectory.Name, tree.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, tree.Type);
            Assert.AreEqual(baseDirectory.GetFiles().Length, tree.Children.Count);
            Assert.IsTrue(tree.Children.All(x => x.Type == FileSystemTreeItemType.File));
        }

        [Test]
        public void GetFileSystemTree_DirectoryWithOnlySubdirectories_ReturnsTreeWithDirectoryChildrenOnly()
        {
            DirectoryInfo baseDirectory = new DirectoryInfo(_tempDirectoryPath);
            if (baseDirectory.GetFiles().Length != 0)
            {
                Assert.Ignore("The test directory contains files.");
            }

            FileSystemTreeItem tree = Program.GetFileSystemTree(baseDirectory);

            Assert.AreEqual(baseDirectory.Name, tree.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, tree.Type);
            Assert.AreEqual(baseDirectory.GetDirectories().Length, tree.Children.Count);
            Assert.IsTrue(tree.Children.All(x => x.Type == FileSystemTreeItemType.Directory));
        }
    }
}
