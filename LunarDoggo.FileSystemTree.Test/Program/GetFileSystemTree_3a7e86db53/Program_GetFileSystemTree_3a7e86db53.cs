// Test generated by RoostGPT for test test-csharp5 using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using LunarDoggo.FileSystemTree;
using LunarDoggo.FileSystemTree.Test;

namespace LunarDoggo.FileSystemTree.Test
{
    public class Program_GetFileSystemTree_3a7e86db53
    {
        private DirectoryInfo baseDirectory;
        private DirectoryInfo subDirectory;
        private FileInfo baseFile;
        private FileInfo subFile;

        [SetUp]
        public void Setup()
        {
            baseDirectory = new DirectoryInfo(@"C:\TestDirectory");
            subDirectory = new DirectoryInfo(@"C:\TestDirectory\SubDirectory");
            baseFile = new FileInfo(@"C:\TestDirectory\TestFile.txt");
            subFile = new FileInfo(@"C:\TestDirectory\SubDirectory\TestSubFile.txt");
        }

        [Test]
        public void GetFileSystemTree_BaseDirectoryHasFilesAndSubdirectories_ReturnsCorrectFileSystemTree()
        {
            FileSystemTreeItem result = Program.GetFileSystemTree(baseDirectory);

            Assert.AreEqual(baseDirectory.Name, result.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);

            Assert.IsTrue(result.Children.Any(item => item.Name == baseFile.Name && item.Type == FileSystemTreeItemType.File));
            Assert.IsTrue(result.Children.Any(item => item.Name == subDirectory.Name && item.Type == FileSystemTreeItemType.Directory));
        }

        [Test]
        public void GetFileSystemTree_SubDirectoryHasFiles_ReturnsCorrectFileSystemTree()
        {
            FileSystemTreeItem result = Program.GetFileSystemTree(subDirectory);

            Assert.AreEqual(subDirectory.Name, result.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);

            Assert.IsTrue(result.Children.Any(item => item.Name == subFile.Name && item.Type == FileSystemTreeItemType.File));
        }

        [Test]
        public void GetFileSystemTree_DirectoryDoesNotExist_ThrowsDirectoryNotFoundException()
        {
            DirectoryInfo nonExistentDirectory = new DirectoryInfo(@"C:\NonExistentDirectory");

            Assert.Throws<DirectoryNotFoundException>(() => Program.GetFileSystemTree(nonExistentDirectory));
        }
    }
}
