// Test generated by RoostGPT for test unt-test using AI Type Azure Open AI and AI Model roost-gpt

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using NUnit.Framework;

namespace FileSystemTree.Tests
{
    [TestFixture]
    public class FileSystemTreeTests
    {
        [Test]
        public void Test_GetFileSystemTree_WithEmptyDirectory_ReturnsEmptyTree()
        {
            // Arrange
            DirectoryInfo baseDirectory = new DirectoryInfo("C:/Temp/EmptyFolder");

            // Act
            FileSystemTreeItem result = Program.GetFileSystemTree(baseDirectory);

            // Assert
            Assert.AreEqual("EmptyFolder", result.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);
            Assert.AreEqual(0, result.Children.Length);
        }

        [Test]
        public void Test_GetFileSystemTree_WithNestedDirectories_ReturnsTreeWithCorrectHierarchy()
        {
            // Arrange
            string baseDirectoryPath = "C:/Temp/RootFolder";
            Directory.CreateDirectory(baseDirectoryPath);

            string subdirectory1Path = Path.Combine(baseDirectoryPath, "Subdirectory1");
            Directory.CreateDirectory(subdirectory1Path);

            string subdirectory2Path = Path.Combine(baseDirectoryPath, "Subdirectory2");
            Directory.CreateDirectory(subdirectory2Path);

            string subdirectory3Path = Path.Combine(subdirectory1Path, "Subdirectory3");
            Directory.CreateDirectory(subdirectory3Path);

            string filePath1 = Path.Combine(baseDirectoryPath, "File1.txt");
            File.Create(filePath1).Close();

            string filePath2 = Path.Combine(subdirectory1Path, "File2.txt");
            File.Create(filePath2).Close();

            string filePath3 = Path.Combine(subdirectory3Path, "File3.txt");
            File.Create(filePath3).Close();

            DirectoryInfo baseDirectory = new DirectoryInfo(baseDirectoryPath);

            // Act
            FileSystemTreeItem result = Program.GetFileSystemTree(baseDirectory);

            // Assert
            Assert.AreEqual("RootFolder", result.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);
            Assert.AreEqual(2, result.Children.Length);

            FileSystemTreeItem subdirectory1 = result.Children[0];
            Assert.AreEqual("Subdirectory1", subdirectory1.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, subdirectory1.Type);
            Assert.AreEqual(2, subdirectory1.Children.Length);

            FileSystemTreeItem subdirectory2 = result.Children[1];
            Assert.AreEqual("Subdirectory2", subdirectory2.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, subdirectory2.Type);
            Assert.AreEqual(0, subdirectory2.Children.Length);

            FileSystemTreeItem subdirectory3 = subdirectory1.Children[0];
            Assert.AreEqual("Subdirectory3", subdirectory3.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, subdirectory3.Type);
            Assert.AreEqual(1, subdirectory3.Children.Length);

            FileSystemTreeItem file1 = result.Children[0].Children[1];
            Assert.AreEqual("File1.txt", file1.Name);
            Assert.AreEqual(FileSystemTreeItemType.File, file1.Type);
            Assert.AreEqual(null, file1.Children);

            FileSystemTreeItem file2 = result.Children[0].Children[1].Children[0];
            Assert.AreEqual("File2.txt", file2.Name);
            Assert.AreEqual(FileSystemTreeItemType.File, file2.Type);
            Assert.AreEqual(null, file2.Children);

            FileSystemTreeItem file3 = result.Children[0].Children[0].Children[0].Children[0];
            Assert.AreEqual("File3.txt", file3.Name);
            Assert.AreEqual(FileSystemTreeItemType.File, file3.Type);
            Assert.AreEqual(null, file3.Children);
        }
    }

    // Todo: Implement the FileSystemTreeItem class
    public class FileSystemTreeItem
    {
        public string Name { get; }
        public FileSystemTreeItemType Type { get; }
        public ImmutableArray<FileSystemTreeItem> Children { get; }

        public FileSystemTreeItem(string name, FileSystemTreeItemType type, ImmutableArray<FileSystemTreeItem> children)
        {
            Name = name;
            Type = type;
            Children = children;
        }
    }

    public enum FileSystemTreeItemType
    {
        File,
        Directory
    }

    // Todo: Implement the Program class
    public class Program
    {
        public static FileSystemTreeItem GetFileSystemTree(DirectoryInfo baseDirectory)
        {
            throw new NotImplementedException();
        }
    }
}
