// ********RoostGPT********
/*
Test generated by RoostGPT for test testing-unit using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=DrawGameResult_5ea8725c74
ROOST_METHOD_SIG_HASH=DrawGameResult_127a94cb29

   ########## Test-Scenarios ##########  

Scenario 1: Regular Scenario

Details:
  TestName: DrawGameResultRegularScenario
  Description: This test is meant to check if the method properly draws the game result in a regular scenario where totalQuestionCount and correctAnswersCount are valid positive integers.
Execution:
  Arrange: Set totalQuestionCount and correctAnswersCount to any positive integer values.
  Act: Invoke DrawGameResult(totalQuestionCount, correctAnswersCount).
  Assert: Use NUnit assertions to check if the console output matches the expected string.
Validation:
  The assertion aims to verify that the console output is as expected. This is significant as it checks if the game result is being displayed correctly.

Scenario 2: Zero Correct Answers

Details:
  TestName: DrawGameResultZeroCorrectAnswers
  Description: This test is meant to check if the method correctly handles the scenario where the player didn't answer any question correctly.
Execution:
  Arrange: Set totalQuestionCount to any positive integer and correctAnswersCount to 0.
  Act: Invoke DrawGameResult(totalQuestionCount, correctAnswersCount).
  Assert: Use NUnit assertions to check if the console output matches the expected string.
Validation:
  The assertion aims to verify that the console output correctly indicates that no answers were correct. This is significant as it checks if the game result is being displayed correctly in this edge case.

Scenario 3: All Answers Correct

Details:
  TestName: DrawGameResultAllAnswersCorrect
  Description: This test is meant to check if the method correctly handles the scenario where the player answered all questions correctly.
Execution:
  Arrange: Set totalQuestionCount and correctAnswersCount to the same positive integer.
  Act: Invoke DrawGameResult(totalQuestionCount, correctAnswersCount).
  Assert: Use NUnit assertions to check if the console output matches the expected string.
Validation:
  The assertion aims to verify that the console output correctly indicates that all answers were correct. This is significant as it checks if the game result is being displayed correctly in this edge case.

Scenario 4: Negative Total Question Count

Details:
  TestName: DrawGameResultNegativeTotalQuestionCount
  Description: This test is meant to check how the method handles an invalid negative totalQuestionCount.
Execution:
  Arrange: Set totalQuestionCount to a negative value and correctAnswersCount to any positive integer.
  Act: Invoke DrawGameResult(totalQuestionCount, correctAnswersCount).
  Assert: Use NUnit assertions to check if the console output matches the expected string.
Validation:
  The assertion aims to verify that the method handles negative totalQuestionCount appropriately. This is significant as it checks the method's error handling capability.

Scenario 5: Negative Correct Answers Count

Details:
  TestName: DrawGameResultNegativeCorrectAnswersCount
  Description: This test is meant to check how the method handles an invalid negative correctAnswersCount.
Execution:
  Arrange: Set totalQuestionCount to any positive integer and correctAnswersCount to a negative value.
  Act: Invoke DrawGameResult(totalQuestionCount, correctAnswersCount).
  Assert: Use NUnit assertions to check if the console output matches the expected string.
Validation:
  The assertion aims to verify that the method handles negative correctAnswersCount appropriately. This is significant as it checks the method's error handling capability.

================================VULNERABILITIES================================
Vulnerability: CWE-20: Improper Input Validation
Issue: The code does not validate user input before processing it. This could lead to unexpected behavior or crashes if the user enters invalid input.
Solution: Wrap user input in a validation method to ensure it matches expected formats before processing it. This could be as simple as checking if a string is null or empty, or as complex as regex validation for specific formats.

Vulnerability: CWE-200: Information Exposure
Issue: The application exposes detailed error messages to the user, which could provide useful information to an attacker. For example, the message 'No questions were loaded, please enter some questions into the json file in the applications folder.' exposes the use of a JSON file and its location.
Solution: Limit the amount of information given in error messages displayed to the user. Log detailed error information server-side where it can be reviewed by authorized personnel.

Vulnerability: CWE-749: Exposed Dangerous Method or Function
Issue: The function DrawAnswerStatus() exposes the correct answer to a question when the user's answer is incorrect. This could be exploited to reveal all the correct answers.
Solution: Consider not revealing correct answers to incorrect responses, or rate limit the API to prevent rapid-fire guessing.

================================================================================

*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using LunarDoggo.QuizGame.Visuals;
using System.IO;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawGameResultTest
    {
        private ConsoleVisualizer consoleVisualizer;
        private StringWriter stringWriter;

        [SetUp]
        public void Setup()
        {
            consoleVisualizer = new ConsoleVisualizer();
            stringWriter = new StringWriter();
            Console.SetOut(stringWriter);
        }

        [Test]
        public void DrawGameResultRegularScenario()
        {
            consoleVisualizer.DrawGameResult(10, 5);
            Assert.AreEqual("You got 5 out of 10 question right. Continue with \"enter\".\r\n\r\n", stringWriter.ToString());
        }

        [Test]
        public void DrawGameResultZeroCorrectAnswers()
        {
            consoleVisualizer.DrawGameResult(10, 0);
            Assert.AreEqual("You got 0 out of 10 question right. Continue with \"enter\".\r\n\r\n", stringWriter.ToString());
        }

        [Test]
        public void DrawGameResultAllAnswersCorrect()
        {
            consoleVisualizer.DrawGameResult(10, 10);
            Assert.AreEqual("You got 10 out of 10 question right. Continue with \"enter\".\r\n\r\n", stringWriter.ToString());
        }

        [Test]
        public void DrawGameResultNegativeTotalQuestionCount()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => consoleVisualizer.DrawGameResult(-10, 5));
        }

        [Test]
        public void DrawGameResultNegativeCorrectAnswersCount()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => consoleVisualizer.DrawGameResult(10, -5));
        }

        [TearDown]
        public void TearDown()
        {
            stringWriter.Close();
        }
    }
}
