// Test generated by RoostGPT for test demo5 using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using System;
using System.Collections.Generic;
using LunarDoggo.QuizGame.IO;
using Moq;

namespace LunarDoggo.QuizGame.IO.Test
{
    [TestFixture]
    public class FileQuizQuestionSerializer_SetGuids_735b448be8
    {
        [Test]
        public void SetGuids_TestWithValidQuestions_AssignsNewGuids()
        {
            // Arrange
            var questions = new List<QuizQuestion>
            {
                new QuizQuestion { Answers = new List<QuizQuestionAnswer> { new QuizQuestionAnswer(), new QuizQuestionAnswer() } },
                new QuizQuestion { Answers = new List<QuizQuestionAnswer> { new QuizQuestionAnswer(), new QuizQuestionAnswer() } }
            };

            // Act
            SetGuids(questions);

            // Assert
            foreach (var question in questions)
            {
                Assert.AreNotEqual(Guid.Empty, question.Id);
                foreach (var answer in question.Answers)
                {
                    Assert.AreNotEqual(Guid.Empty, answer.Id);
                }
            }
        }

        [Test]
        public void SetGuids_TestWithNullQuestions_ThrowsArgumentNullException()
        {
            // Arrange
            IEnumerable<QuizQuestion> questions = null;

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => SetGuids(questions));
        }

        [Test]
        public void SetGuids_TestWithNullAnswers_ThrowsArgumentNullException()
        {
            // Arrange
            var questions = new List<QuizQuestion>
            {
                new QuizQuestion { Answers = null }
            };

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => SetGuids(questions));
        }

        private void SetGuids(IEnumerable<QuizQuestion> questions)
        {
            if (questions == null)
            {
                throw new ArgumentNullException(nameof(questions));
            }

            foreach (var question in questions)
            {
                if (question.Answers == null)
                {
                    throw new ArgumentNullException(nameof(question.Answers));
                }

                question.Id = Guid.NewGuid();
                foreach (var answer in question.Answers)
                {
                    answer.Id = Guid.NewGuid();
                }
            }
        }
    }
}
