// Test generated by RoostGPT for test efghi using AI Type Open AI and AI Model gpt-4

using System.Collections.Immutable;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;
using NUnit.Framework;
using LunarDoggo.FileSystemTree;

namespace LunarDoggo.FileSystemTree.Tests
{
    public class ProgramTests
    {
        [Test]
        public void TestProgram_GetFileSystemTree_fd7daa2836()
        {
            // TODO: Replace 'YourDirectoryPath' with the path of a real directory for testing
            DirectoryInfo baseDirectory = new DirectoryInfo("YourDirectoryPath");

            // Act
            FileSystemTreeItem result = Program.GetFileSystemTree(baseDirectory);

            // Assert
            Assert.IsNotNull(result);
            Assert.AreEqual(baseDirectory.Name, result.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);
            Assert.IsTrue(result.Children.Any());

            // TODO: Replace 'YourSubdirectoryName' with the name of a real subdirectory for testing
            Assert.IsTrue(result.Children.Any(child => child.Name == "YourSubdirectoryName" && child.Type == FileSystemTreeItemType.Directory));

            // TODO: Replace 'YourFileName' with the name of a real file for testing
            Assert.IsTrue(result.Children.Any(child => child.Name == "YourFileName" && child.Type == FileSystemTreeItemType.File));
        }

        [Test]
        public void TestProgram_GetFileSystemTree_fd7daa2836_InvalidDirectory()
        {
            // Arrange
            DirectoryInfo baseDirectory = new DirectoryInfo("InvalidDirectoryPath");

            // Act & Assert
            var ex = Assert.Throws<DirectoryNotFoundException>(() => Program.GetFileSystemTree(baseDirectory));
            Assert.That(ex.Message, Is.EqualTo("Could not find a part of the path 'InvalidDirectoryPath'."));
        }
    }
}
