// ********RoostGPT********
/*
Test generated by RoostGPT for test testing-unit using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=DrawAnswerStatus_7b85836452
ROOST_METHOD_SIG_HASH=DrawAnswerStatus_27e98f06a4

   ########## Test-Scenarios ##########  

Scenario 1: Test Correct Answer Status

Details:
  TestName: TestDrawCorrectAnswerStatus
  Description: This test verifies that the method DrawAnswerStatus correctly outputs the success message when the answer is correct.
Execution:
  Arrange: Create a QuizQuestionAnswer object with a valid answer. Set the 'correct' parameter to true.
  Act: Call the DrawAnswerStatus method with the 'correct' parameter as true and the QuizQuestionAnswer object.
  Assert: Check if the Console output contains the success message "Your answer is correct. Continue with \"enter\"."
Validation:
  The assertion checks if the success message was correctly printed to the console. This confirms that the method correctly handles correct answers.

Scenario 2: Test Incorrect Answer Status

Details:
  TestName: TestDrawIncorrectAnswerStatus
  Description: This test verifies that the method DrawAnswerStatus correctly outputs the failure message when the answer is incorrect.
Execution:
  Arrange: Create a QuizQuestionAnswer object with a valid answer. Set the 'correct' parameter to false.
  Act: Call the DrawAnswerStatus method with the 'correct' parameter as false and the QuizQuestionAnswer object.
  Assert: Check if the Console output contains the failure message "Your answer isn't correct. The correct answer is: \"{0}\". Continue with \"enter\".", where {0} is the correct answer.
Validation:
  The assertion checks if the failure message along with the correct answer was correctly printed to the console. This confirms that the method correctly handles incorrect answers.

Scenario 3: Test Null CorrectAnswer

Details:
  TestName: TestDrawAnswerStatusWithNullCorrectAnswer
  Description: This test verifies that the method DrawAnswerStatus correctly handles a null correctAnswer object.
Execution:
  Arrange: Set the 'correct' parameter to false and the 'correctAnswer' parameter to null.
  Act: Call the DrawAnswerStatus method with the 'correct' parameter as false and the 'correctAnswer' parameter as null.
  Assert: Check if the Console output contains the failure message "Your answer isn't correct. The correct answer is: \"\". Continue with \"enter\"."
Validation:
  The assertion checks if the failure message was correctly printed to the console with an empty string as the correct answer. This confirms that the method correctly handles a null correctAnswer object.

================================VULNERABILITIES================================
Vulnerability: CWE-20: Improper Input Validation
Issue: The ConsoleVisualizer.DrawAnswerStatus, ConsoleVisualizer.DrawQuizQuestion, and ConsoleVisualizer.DrawQuizQuestionAnswer methods directly output user inputs to the console without any form of validation or sanitization.
Solution: Perform input validation and sanitization on user inputs. Use the System.Security.SecurityElement.Escape method to encode user inputs before outputting them to the console.

Vulnerability: CWE-200: Information Exposure
Issue: The ConsoleVisualizer.DrawNoQuestions method provides detailed error information when no questions are loaded. This could unintentionally expose sensitive system or application details to an attacker.
Solution: Modify the error message in the ConsoleVisualizer.DrawNoQuestions method to be more generic and not give away any system or application details. Log detailed error information for internal use only.

Vulnerability: CWE-404: Improper Resource Shutdown or Release
Issue: The ConsoleVisualizer class does not handle any resource management for the Console object it uses. This could lead to resource leaks if the Console object is not properly closed or disposed.
Solution: Implement the IDisposable interface in the ConsoleVisualizer class and properly close or dispose the Console object in the Dispose method.

================================================================================

*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using Moq;
using Newtonsoft.Json;
using LunarDoggo.QuizGame.Visuals;
using System.IO;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawAnswerStatusTest
    {
        private ConsoleVisualizer visualizer;
        private StringWriter consoleOutput;
        
        [SetUp]
        public void Setup()
        {
            visualizer = new ConsoleVisualizer();
            consoleOutput = new StringWriter();
            Console.SetOut(consoleOutput);
        }

        [Test]
        public void TestDrawCorrectAnswerStatus()
        {
            QuizQuestionAnswer correctAnswer = new QuizQuestionAnswer
            {
                // TODO: Change the Answer with valid value
                Answer = "Valid Answer"
            };

            visualizer.DrawAnswerStatus(true, correctAnswer);

            var expectedMessage = "Your answer is correct. Continue with \"enter\".\r\n";
            Assert.AreEqual(expectedMessage, consoleOutput.ToString());
        }

        [Test]
        public void TestDrawIncorrectAnswerStatus()
        {
            QuizQuestionAnswer correctAnswer = new QuizQuestionAnswer
            {
                // TODO: Change the Answer with valid value
                Answer = "Valid Answer"
            };

            visualizer.DrawAnswerStatus(false, correctAnswer);

            var expectedMessage = $"Your answer isn't correct. The correct answer is: \"{correctAnswer.Answer}\". Continue with \"enter\".\r\n";
            Assert.AreEqual(expectedMessage, consoleOutput.ToString());
        }

        [Test]
        public void TestDrawAnswerStatusWithNullCorrectAnswer()
        {
            visualizer.DrawAnswerStatus(false, null);

            var expectedMessage = "Your answer isn't correct. The correct answer is: \"\". Continue with \"enter\".\r\n";
            Assert.AreEqual(expectedMessage, consoleOutput.ToString());
        }

        [TearDown]
        public void TearDown()
        {
            consoleOutput.Close();
        }
    }
}
