// Test generated by RoostGPT for test test-dummy using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using System.Collections.Immutable;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;

namespace LunarDoggo.FileSystemTree.Tests
{
    public class FileSystemTreeItem
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public List<FileSystemTreeItem> Children { get; set; }

        public FileSystemTreeItem(string name, string type, List<FileSystemTreeItem> children)
        {
            Name = name;
            Type = type;
            Children = children;
        }
    }

    public class Program
    {
        public static void OutputFileSystemTreeLevel(int level, FileSystemTreeItem item)
        {
            Console.WriteLine(new string(' ', level * 2) + item.Name + " (" + item.Type + ")");
            foreach (var child in item.Children)
            {
                OutputFileSystemTreeLevel(level + 1, child);
            }
        }
    }

    [TestFixture]
    public class FileSystemTreeTests
    {
        [Test]
        public void TestOutputFileSystemTreeLevelWithValidInput()
        {
            var children = new List<FileSystemTreeItem>
            {
                new FileSystemTreeItem("Child1", "File", new List<FileSystemTreeItem>()),
                new FileSystemTreeItem("Child2", "File", new List<FileSystemTreeItem>())
            };

            var parent = new FileSystemTreeItem("Parent", "Directory", children);

            using (var sw = new StringWriter())
            {
                Console.SetOut(sw);

                Program.OutputFileSystemTreeLevel(0, parent);

                var result = sw.ToString().Trim();

                var expected = "Parent (Directory)\n  Child1 (File)\n  Child2 (File)";

                Assert.AreEqual(expected, result);
            }
        }

        [Test]
        public void TestOutputFileSystemTreeLevelWithNoChildren()
        {
            var parent = new FileSystemTreeItem("Parent", "Directory", new List<FileSystemTreeItem>());

            using (var sw = new StringWriter())
            {
                Console.SetOut(sw);

                Program.OutputFileSystemTreeLevel(0, parent);

                var result = sw.ToString().Trim();

                var expected = "Parent (Directory)";

                Assert.AreEqual(expected, result);
            }
        }
    }
}
