// ********RoostGPT********
/*
Test generated by RoostGPT for test testing-unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=DrawGameResult_5ea8725c74
ROOST_METHOD_SIG_HASH=DrawGameResult_127a94cb29

   ########## Test-Scenarios ##########  

Here are the NUnit test scenarios for the DrawGameResult method in the LunarDoggo.QuizGame.Visuals namespace:

Scenario 1: DrawGameResult_WithValidTotalQuestionCountAndCorrectAnswersCount

Details:
  TestName: DrawGameResult_WithValidTotalQuestionCountAndCorrectAnswersCount
  Description: This test verifies that the DrawGameResult method correctly displays the game result when provided with valid totalQuestionCount and correctAnswersCount values.
Execution:
  Arrange: Create an instance of the ConsoleVisualizer class.
  Act: Call the DrawGameResult method with valid totalQuestionCount and correctAnswersCount values.
  Assert: Verify that the console output contains the expected message with the correct values for totalQuestionCount and correctAnswersCount.
Validation:
  The assertion ensures that the game result is displayed correctly based on the provided totalQuestionCount and correctAnswersCount.
  This test is important to validate that the user receives accurate feedback on their performance in the quiz game.

Scenario 2: DrawGameResult_WithZeroTotalQuestionCount

Details:
  TestName: DrawGameResult_WithZeroTotalQuestionCount
  Description: This test verifies that the DrawGameResult method handles the case when the totalQuestionCount is zero.
Execution:
  Arrange: Create an instance of the ConsoleVisualizer class.
  Act: Call the DrawGameResult method with totalQuestionCount set to 0 and correctAnswersCount set to 0.
  Assert: Verify that the console output contains the expected message indicating that no questions were answered.
Validation:
  The assertion ensures that the method handles the case when there are no questions in the quiz game gracefully.
  This test is important to validate that the user receives appropriate feedback when the quiz game has no questions.

Scenario 3: DrawGameResult_WithCorrectAnswersCountGreaterThanTotalQuestionCount

Details:
  TestName: DrawGameResult_WithCorrectAnswersCountGreaterThanTotalQuestionCount
  Description: This test verifies that the DrawGameResult method handles the case when the correctAnswersCount is greater than the totalQuestionCount.
Execution:
  Arrange: Create an instance of the ConsoleVisualizer class.
  Act: Call the DrawGameResult method with correctAnswersCount greater than totalQuestionCount.
  Assert: Verify that the console output contains the expected message indicating an invalid state.
Validation:
  The assertion ensures that the method handles the case when the correctAnswersCount exceeds the totalQuestionCount gracefully.
  This test is important to validate that the method can handle unexpected input and provide appropriate feedback to the user.

Scenario 4: DrawGameResult_WithNegativeTotalQuestionCount

Details:
  TestName: DrawGameResult_WithNegativeTotalQuestionCount
  Description: This test verifies that the DrawGameResult method handles the case when the totalQuestionCount is negative.
Execution:
  Arrange: Create an instance of the ConsoleVisualizer class.
  Act: Call the DrawGameResult method with a negative value for totalQuestionCount.
  Assert: Verify that the console output contains the expected message indicating an invalid state.
Validation:
  The assertion ensures that the method handles the case when the totalQuestionCount is negative gracefully.
  This test is important to validate that the method can handle invalid input and provide appropriate feedback to the user.

Scenario 5: DrawGameResult_WithNegativeCorrectAnswersCount

Details:
  TestName: DrawGameResult_WithNegativeCorrectAnswersCount
  Description: This test verifies that the DrawGameResult method handles the case when the correctAnswersCount is negative.
Execution:
  Arrange: Create an instance of the ConsoleVisualizer class.
  Act: Call the DrawGameResult method with a negative value for correctAnswersCount.
  Assert: Verify that the console output contains the expected message indicating an invalid state.
Validation:
  The assertion ensures that the method handles the case when the correctAnswersCount is negative gracefully.
  This test is important to validate that the method can handle invalid input and provide appropriate feedback to the user.

================================VULNERABILITIES================================
Vulnerability: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
Issue: The code uses Console.WriteLine to output data directly from QuizQuestionAnswer objects (correctAnswer.Answer) without proper escaping or validation. If the quiz answers contain any untrusted data or special characters, it could lead to injection of malicious code in the console output.
Solution: Implement proper input validation and escaping for any data printed to the console. Use parameterized string formatting and consider HTML encoding or removing special characters from the quiz answers before displaying them.

Vulnerability: CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')
Issue: The DrawNoQuestions method instructs the user to enter questions into a JSON file in the application's folder. If the file path is constructed using untrusted user input, it could allow an attacker to traverse outside the intended directory and access or modify sensitive files.
Solution: Validate and sanitize any file paths constructed from user input. Use Path.Combine to create file paths safely and consider using a whitelist of allowed file locations. Avoid using untrusted data directly in file paths.

Vulnerability: CWE-20: Improper Input Validation
Issue: The code does not perform any input validation on the totalQuestionCount and correctAnswersCount parameters in the DrawGameResult method. If these values are not properly validated, it could lead to incorrect or misleading output.
Solution: Implement proper input validation for all method parameters. Ensure that totalQuestionCount and correctAnswersCount are non-negative integers within a reasonable range. Handle any invalid input gracefully and consider logging or alerting on suspicious values.

================================================================================

*/

// ********RoostGPT********
using System;
using System.IO;
using NUnit.Framework;
using LunarDoggo.QuizGame.Visuals;

namespace LunarDoggo.QuizGame.Tests
{
    [TestFixture]
    public class DrawGameResultTest
    {
        private ConsoleVisualizer _visualizer;
        private StringWriter _stringWriter;

        [SetUp]
        public void Setup()
        {
            _visualizer = new ConsoleVisualizer();
            _stringWriter = new StringWriter();
            Console.SetOut(_stringWriter);
        }

        [TearDown]
        public void TearDown()
        {
            _stringWriter.Dispose();
        }

        [Test]
        public void DrawGameResult_WithValidTotalQuestionCountAndCorrectAnswersCount()
        {
            // Arrange
            int totalQuestionCount = 5;
            int correctAnswersCount = 3;
            string expectedOutput = $"You got {correctAnswersCount} out of {totalQuestionCount} question right. Continue with \"enter\".\r\n\r\n";

            // Act
            _visualizer.DrawGameResult(totalQuestionCount, correctAnswersCount);

            // Assert
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        [Test]
        public void DrawGameResult_WithZeroTotalQuestionCount()
        {
            // Arrange
            int totalQuestionCount = 0;
            int correctAnswersCount = 0;
            string expectedOutput = "You got 0 out of 0 question right. Continue with \"enter\".\r\n\r\n";

            // Act
            _visualizer.DrawGameResult(totalQuestionCount, correctAnswersCount);

            // Assert
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        [Test]
        public void DrawGameResult_WithCorrectAnswersCountGreaterThanTotalQuestionCount()
        {
            // Arrange
            int totalQuestionCount = 3;
            int correctAnswersCount = 5;
            string expectedOutput = $"You got {correctAnswersCount} out of {totalQuestionCount} question right. Continue with \"enter\".\r\n\r\n";

            // Act
            _visualizer.DrawGameResult(totalQuestionCount, correctAnswersCount);

            // Assert
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        [Test]
        public void DrawGameResult_WithNegativeTotalQuestionCount()
        {
            // Arrange
            int totalQuestionCount = -3;
            int correctAnswersCount = 2;
            string expectedOutput = $"You got {correctAnswersCount} out of {totalQuestionCount} question right. Continue with \"enter\".\r\n\r\n";

            // Act
            _visualizer.DrawGameResult(totalQuestionCount, correctAnswersCount);

            // Assert
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        [Test]
        public void DrawGameResult_WithNegativeCorrectAnswersCount()
        {
            // Arrange
            int totalQuestionCount = 4;
            int correctAnswersCount = -2;
            string expectedOutput = $"You got {correctAnswersCount} out of {totalQuestionCount} question right. Continue with \"enter\".\r\n\r\n";

            // Act
            _visualizer.DrawGameResult(totalQuestionCount, correctAnswersCount);

            // Assert
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }
    }
}
