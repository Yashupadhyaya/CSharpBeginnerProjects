// Test generated by RoostGPT for test int-test using AI Type Open AI and AI Model gpt-3.5-turbo-0301

using System;
using System.Collections.Generic;
using NUnit.Framework;

namespace FileSystemTreeItemTests
{
    [TestFixture]
    public class FileSystemTreeItemTests
    {
        [Test]
        public void TestFileSystemTreeItem_FileSystemTreeItem_WithNullName_ShouldThrowArgumentNullException()
        {
            // Arrange
            string name = null;
            FileSystemTreeItemType type = FileSystemTreeItemType.File;
            IEnumerable<FileSystemTreeItem> children = new List<FileSystemTreeItem>();

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => new FileSystemTreeItem(name, type, children));
        }

        [Test]
        public void TestFileSystemTreeItem_FileSystemTreeItem_WithValidParameters_ShouldCreateFileSystemTreeItemObject()
        {
            // Arrange
            string name = "file.txt";
            FileSystemTreeItemType type = FileSystemTreeItemType.File;
            IEnumerable<FileSystemTreeItem> children = new List<FileSystemTreeItem>();

            // Act
            var fileSystemTreeItem = new FileSystemTreeItem(name, type, children);

            // Assert
            Assert.IsNotNull(fileSystemTreeItem);
            Assert.AreEqual(name, fileSystemTreeItem.Name);
            Assert.AreEqual(type, fileSystemTreeItem.Type);
            Assert.AreEqual(children, fileSystemTreeItem.Children);
        }
    }

    public class FileSystemTreeItem
    {
        public string Name { get; }
        public FileSystemTreeItemType Type { get; }
        public IEnumerable<FileSystemTreeItem> Children { get; }

        public FileSystemTreeItem(string name, FileSystemTreeItemType type, IEnumerable<FileSystemTreeItem> children)
        {
            if (string.IsNullOrWhiteSpace(name))
            {
                throw new ArgumentNullException(nameof(name));
            }

            Name = name;
            Type = type;
            Children = children ?? new List<FileSystemTreeItem>();
        }
    }

    public enum FileSystemTreeItemType
    {
        File,
        Directory
    }
}
