// Test generated by RoostGPT for test test-csrepo using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using Moq;
using LunarDoggo.QuizGame;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class contains_ProcessEnterPress_715cac28e5
    {
        private Mock<IState> mockState;
        private QuizGame quizGame;

        [SetUp]
        public void Setup()
        {
            this.mockState = new Mock<IState>();
            this.quizGame = new QuizGame(this.mockState.Object);
        }

        [Test]
        public void ProcessEnterPress_IsStartedAndQuestionAnswered_MoveToNextQuestionCalled()
        {
            // Arrange
            this.quizGame.isStarted = true;
            this.mockState.Setup(s => s.IsCurrentQuestionAnswered).Returns(true);

            // Act
            this.quizGame.ProcessEnterPress();

            // Assert
            this.mockState.Verify(s => s.MoveToNextQuestion(), Times.Once);
            this.mockState.Verify(s => s.AnswerQuestion(), Times.Never);
        }

        [Test]
        public void ProcessEnterPress_IsStartedAndQuestionNotAnswered_AnswerQuestionCalled()
        {
            // Arrange
            this.quizGame.isStarted = true;
            this.mockState.Setup(s => s.IsCurrentQuestionAnswered).Returns(false);

            // Act
            this.quizGame.ProcessEnterPress();

            // Assert
            this.mockState.Verify(s => s.MoveToNextQuestion(), Times.Never);
            this.mockState.Verify(s => s.AnswerQuestion(), Times.Once);
        }

        [Test]
        public void ProcessEnterPress_IsNotStarted_MoveToNextQuestionCalledAndIsStartedIsTrue()
        {
            // Arrange
            this.quizGame.isStarted = false;

            // Act
            this.quizGame.ProcessEnterPress();

            // Assert
            Assert.IsTrue(this.quizGame.isStarted);
            this.mockState.Verify(s => s.MoveToNextQuestion(), Times.Once);
            this.mockState.Verify(s => s.AnswerQuestion(), Times.Never);
        }
    }
}
