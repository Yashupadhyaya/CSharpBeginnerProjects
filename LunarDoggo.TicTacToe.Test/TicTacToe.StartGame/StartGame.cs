// ********RoostGPT********
/*
Test generated by RoostGPT for test testing-unit using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=StartGame_ea5458875f
ROOST_METHOD_SIG_HASH=StartGame_941d5801f0

   ########## Test-Scenarios ##########  

Scenario 1: Test StartGame when the game is just starting.
  
Details:
  TestName: TestStartGameOnGameInitialization
  Description: This test is meant to check the StartGame method when the game is just starting. It is expected that the current player is set to first player and the game board is reset.
Execution:
  Arrange: Create an instance of the GameState class and set firstPlayer as the currentPlayer.
  Act: Invoke the StartGame method.
  Assert: Verify that the currentPlayer is set to firstPlayer and the game board is reset.
Validation:
  This test is important to confirm that the game initializes correctly. The expected result is that the currentPlayer is set to firstPlayer and the game board is reset, which is the expected initial state of the game.

Scenario 2: Test StartGame when the game is restarted.
  
Details:
  TestName: TestStartGameOnGameRestart
  Description: This test is meant to check the StartGame method when the game is restarted. It is expected that the current player is set to first player and the game board is reset.
Execution:
  Arrange: Create an instance of the GameState class. Play the game until the end (either a player wins or there's a draw). Set secondPlayer as the currentPlayer.
  Act: Invoke the StartGame method.
  Assert: Verify that the currentPlayer is set to firstPlayer and the game board is reset.
Validation:
  This test is significant to confirm that the game restarts correctly. The expected result is that the currentPlayer is set to firstPlayer and the game board is reset, which is the expected state of the game when it is restarted.

Scenario 3: Test StartGame when the game is in progress.
  
Details:
  TestName: TestStartGameDuringGameProgress
  Description: This test is meant to check the StartGame method when the game is in progress. It is expected that the current player is set to first player and the game board is reset.
Execution:
  Arrange: Create an instance of the GameState class. Play the game until it's in progress (neither player has won and it's not a draw). Set secondPlayer as the currentPlayer.
  Act: Invoke the StartGame method.
  Assert: Verify that the currentPlayer is set to firstPlayer and the game board is reset.
Validation:
  This test is important to confirm that the game resets correctly during its progress. The expected result is that the currentPlayer is set to firstPlayer and the game board is reset, which is the expected state of the game when it is reset during its progress.

Scenario 4: Test StartGame when TilesReset event is fired.
  
Details:
  TestName: TestStartGameOnTilesResetEvent
  Description: This test is meant to check the StartGame method when the TilesReset event is fired. It is expected that the TilesReset event is invoked.
Execution:
  Arrange: Create an instance of the GameState class. Set up a mock to listen to the TilesReset event.
  Act: Invoke the StartGame method.
  Assert: Verify that the TilesReset event is invoked.
Validation:
  This test is significant to confirm that the TilesReset event is invoked when the game is started. The expected result is that the TilesReset event is invoked, which is expected behavior when the game is started.

================================VULNERABILITIES================================
Vulnerability: None
Issue: No obvious security issues were found in the provided code.
Solution: Ensure that all input is properly validated and sanitized, even if it doesn't appear to be used in a security-sensitive context.

================================================================================

*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using Moq;
using TicTacToe;

namespace TicTacToe.Test
{
    [TestFixture]
    public class StartGameTest
    {
        private Mock<GameBoard> _gameBoardMock;
        private GameState _gameState;
        private Player _firstPlayer;
        private Player _secondPlayer;
        private ButtonTileMapping[] _buttonTileMappings;

        [SetUp]
        public void Setup()
        {
            _firstPlayer = new Player(1, "X");
            _secondPlayer = new Player(2, "O");
            _gameBoardMock = new Mock<GameBoard>();
            _buttonTileMappings = new ButtonTileMapping[0];
            _gameState = new GameState(_buttonTileMappings, _gameBoardMock.Object, _firstPlayer, _secondPlayer);
        }

        [Test]
        public void TestStartGameOnGameInitialization()
        {
            _gameState.StartGame();

            Assert.AreEqual(_firstPlayer, _gameState.CurrentPlayer);
            _gameBoardMock.Verify(gb => gb.Reset(), Times.Once);
        }

        [Test]
        public void TestStartGameOnGameRestart()
        {
            _gameState.OccupyTile(new ButtonTileMapping(null, 0, 0));
            _gameState.CurrentPlayer = _secondPlayer;

            _gameState.StartGame();

            Assert.AreEqual(_firstPlayer, _gameState.CurrentPlayer);
            _gameBoardMock.Verify(gb => gb.Reset(), Times.Exactly(2));
        }

        [Test]
        public void TestStartGameDuringGameProgress()
        {
            _gameState.OccupyTile(new ButtonTileMapping(null, 0, 0));
            _gameState.CurrentPlayer = _secondPlayer;

            _gameState.StartGame();

            Assert.AreEqual(_firstPlayer, _gameState.CurrentPlayer);
            _gameBoardMock.Verify(gb => gb.Reset(), Times.Exactly(2));
        }

        [Test]
        public void TestStartGameOnTilesResetEvent()
        {
            bool wasCalled = false;
            _gameState.TilesReset += (s, e) => wasCalled = true;

            _gameState.StartGame();

            Assert.IsTrue(wasCalled);
        }
    }
}
