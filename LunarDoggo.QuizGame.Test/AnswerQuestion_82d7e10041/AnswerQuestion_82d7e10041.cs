// ********RoostGPT********
// Test generated by RoostGPT for test csharp-testing using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.QuizGame;
using System.Collections.Generic;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class AnswerQuestion_82d7e10041
    {
        private GameState _gameState;
        private QuizQuestion _quizQuestion;

        [SetUp]
        public void Setup()
        {
            _quizQuestion = new QuizQuestion()
            {
                Answers = new QuizQuestionAnswer[]
                {
                    new QuizQuestionAnswer { IsCorrect = true, Answer = "Correct", Id = Guid.NewGuid() },
                    new QuizQuestionAnswer { IsCorrect = false, Answer = "Incorrect", Id = Guid.NewGuid() }
                },
                Question = "Question",
                Id = Guid.NewGuid()
            };

            _gameState = new GameState(new List<QuizQuestion> { _quizQuestion });
        }

        [Test]
        public void AnswerQuestion_CurrentQuestionIsNull_DoesNotThrowException()
        {
            _gameState.MoveToNextQuestion();
            Assert.DoesNotThrow(() => _gameState.AnswerQuestion());
        }

        [Test]
        public void AnswerQuestion_CurrentQuestionIsNotNull_DoesNotThrowException()
        {
            _gameState.MoveToNextQuestion();
            Assert.DoesNotThrow(() => _gameState.AnswerQuestion());
        }

        [Test]
        public void AnswerQuestion_CurrentQuestionIsNotNull_ChosenAnswerIsNotNull()
        {
            _gameState.MoveToNextQuestion();
            _gameState.AnswerQuestion();
            Assert.IsNotNull(_gameState.ChosenAnswer);
        }

        [Test]
        public void AnswerQuestion_CurrentQuestionIsNotNull_IsCurrentQuestionAnsweredIsTrue()
        {
            _gameState.MoveToNextQuestion();
            _gameState.AnswerQuestion();
            Assert.IsTrue(_gameState.IsCurrentQuestionAnswered);
        }

        [Test]
        public void AnswerQuestion_CurrentQuestionIsNotNull_AnsweredQuestionCountIsOne()
        {
            _gameState.MoveToNextQuestion();
            _gameState.AnswerQuestion();
            Assert.AreEqual(1, _gameState.AnsweredQuestionCount);
        }
    }
}
