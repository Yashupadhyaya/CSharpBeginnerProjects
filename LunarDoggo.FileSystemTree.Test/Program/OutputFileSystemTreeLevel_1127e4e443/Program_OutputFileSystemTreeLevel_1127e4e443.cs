// Test generated by RoostGPT for test demo56 using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using LunarDoggo.FileSystemTree.Test;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace LunarDoggo.FileSystemTree.Test
{
    public class FileSystemTreeItem
    {
        public string Name { get; set; }
        public FileSystemTreeItemType Type { get; set; }
        public List<FileSystemTreeItem> Children { get; set; }

        public FileSystemTreeItem(string name, FileSystemTreeItemType type, List<FileSystemTreeItem> children)
        {
            this.Name = name;
            this.Type = type;
            this.Children = children;
        }
    }

    public enum FileSystemTreeItemType
    {
        File,
        Directory
    }

    public class Program
    {
        public static void OutputFileSystemTreeLevel(int indentationLevel, FileSystemTreeItem item)
        {
            Console.WriteLine(new String(' ', indentationLevel * 2) + item.Name + " (" + item.Type.ToString().ToLower() + ")");
            foreach (var child in item.Children)
            {
                OutputFileSystemTreeLevel(indentationLevel + 1, child);
            }
        }
    }

    [TestFixture]
    public class Program_OutputFileSystemTreeLevel_1127e4e443
    {
        [Test]
        public void OutputFileSystemTreeLevel_WithValidIndentationLevelAndItem_ShouldPrintCorrectly()
        {
            // Arrange
            var indentationLevel = 2;
            var item = new FileSystemTreeItem("test", FileSystemTreeItemType.File, new List<FileSystemTreeItem>());
            var expectedOutput = "    test (file)";

            // Act
            using (StringWriter sw = new StringWriter())
            {
                Console.SetOut(sw);
                Program.OutputFileSystemTreeLevel(indentationLevel, item);

                // Assert
                var result = sw.ToString().Trim();
                Assert.AreEqual(expectedOutput, result);
            }
        }

        [Test]
        public void OutputFileSystemTreeLevel_WithValidIndentationLevelAndItemWithChildren_ShouldPrintCorrectly()
        {
            // Arrange
            var indentationLevel = 1;
            var childItems = new List<FileSystemTreeItem>
            {
                new FileSystemTreeItem("child1", FileSystemTreeItemType.File, new List<FileSystemTreeItem>()),
                new FileSystemTreeItem("child2", FileSystemTreeItemType.Directory, new List<FileSystemTreeItem>())
            };
            var item = new FileSystemTreeItem("test", FileSystemTreeItemType.Directory, childItems);
            var expectedOutput = "  test (directory)\n    child1 (file)\n    child2 (directory)";

            // Act
            using (StringWriter sw = new StringWriter())
            {
                Console.SetOut(sw);
                Program.OutputFileSystemTreeLevel(indentationLevel, item);

                // Assert
                var result = sw.ToString().Trim();
                Assert.AreEqual(expectedOutput, result);
            }
        }
    }
}
