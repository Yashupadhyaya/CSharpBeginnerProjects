// Test generated by RoostGPT for test int-test using AI Type Open AI and AI Model gpt-3.5-turbo-0301

using System.Collections.Immutable;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using NUnit.Framework;
using LunarDoggo.FileSystemTree;

namespace LunarDoggo.FileSystemTree
{
    [TestFixture]
    public class FileSystemTreeTests
    {
        [Test]
        public void TestProgram_GetFileSystemTree_71b0e7289b()
        {
            // Test case 1
            DirectoryInfo directoryInfo = new DirectoryInfo("C:\\Users\\test\\Documents");
            FileSystemTreeItem expectedFileSystemTree = new FileSystemTreeItem("Documents", FileSystemTreeItemType.Directory, new FileSystemTreeItem[]
            {
                new FileSystemTreeItem("test.txt", FileSystemTreeItemType.File, null)
            }.ToImmutableArray());
            FileSystemTreeItem actualFileSystemTree = Program.GetFileSystemTree(directoryInfo);
            Assert.AreEqual(expectedFileSystemTree.Name, actualFileSystemTree.Name);
            Assert.AreEqual(expectedFileSystemTree.Type, actualFileSystemTree.Type);
            Assert.AreEqual(expectedFileSystemTree.Children[0].Name, actualFileSystemTree.Children[0].Name);
            Assert.AreEqual(expectedFileSystemTree.Children[0].Type, actualFileSystemTree.Children[0].Type);

            // Test case 2
            DirectoryInfo directoryInfo2 = new DirectoryInfo("C:\\Users\\test\\Pictures");
            FileSystemTreeItem expectedFileSystemTree2 = new FileSystemTreeItem("Pictures", FileSystemTreeItemType.Directory, new FileSystemTreeItem[]
            {
                new FileSystemTreeItem("Family", FileSystemTreeItemType.Directory, new FileSystemTreeItem[]
                {
                    new FileSystemTreeItem("photo1.jpg", FileSystemTreeItemType.File, null),
                    new FileSystemTreeItem("photo2.jpg", FileSystemTreeItemType.File, null),
                    new FileSystemTreeItem("photo3.jpg", FileSystemTreeItemType.File, null)
                }.ToImmutableArray()),
                new FileSystemTreeItem("Friends", FileSystemTreeItemType.Directory, new FileSystemTreeItem[]
                {
                    new FileSystemTreeItem("photo4.jpg", FileSystemTreeItemType.File, null),
                    new FileSystemTreeItem("photo5.jpg", FileSystemTreeItemType.File, null),
                    new FileSystemTreeItem("photo6.jpg", FileSystemTreeItemType.File, null)
                }.ToImmutableArray())
            }.ToImmutableArray());
            FileSystemTreeItem actualFileSystemTree2 = Program.GetFileSystemTree(directoryInfo2);
            Assert.AreEqual(expectedFileSystemTree2.Name, actualFileSystemTree2.Name);
            Assert.AreEqual(expectedFileSystemTree2.Type, actualFileSystemTree2.Type);
            Assert.AreEqual(expectedFileSystemTree2.Children[0].Name, actualFileSystemTree2.Children[0].Name);
            Assert.AreEqual(expectedFileSystemTree2.Children[0].Type, actualFileSystemTree2.Children[0].Type);
            Assert.AreEqual(expectedFileSystemTree2.Children[0].Children[0].Name, actualFileSystemTree2.Children[0].Children[0].Name);
            Assert.AreEqual(expectedFileSystemTree2.Children[0].Children[0].Type, actualFileSystemTree2.Children[0].Children[0].Type);
            Assert.AreEqual(expectedFileSystemTree2.Children[0].Children[1].Name, actualFileSystemTree2.Children[0].Children[1].Name);
            Assert.AreEqual(expectedFileSystemTree2.Children[0].Children[1].Type, actualFileSystemTree2.Children[0].Children[1].Type);
            Assert.AreEqual(expectedFileSystemTree2.Children[0].Children[2].Name, actualFileSystemTree2.Children[0].Children[2].Name);
            Assert.AreEqual(expectedFileSystemTree2.Children[0].Children[2].Type, actualFileSystemTree2.Children[0].Children[2].Type);
            Assert.AreEqual(expectedFileSystemTree2.Children[1].Name, actualFileSystemTree2.Children[1].Name);
            Assert.AreEqual(expectedFileSystemTree2.Children[1].Type, actualFileSystemTree2.Children[1].Type);
            Assert.AreEqual(expectedFileSystemTree2.Children[1].Children[0].Name, actualFileSystemTree2.Children[1].Children[0].Name);
            Assert.AreEqual(expectedFileSystemTree2.Children[1].Children[0].Type, actualFileSystemTree2.Children[1].Children[0].Type);
            Assert.AreEqual(expectedFileSystemTree2.Children[1].Children[1].Name, actualFileSystemTree2.Children[1].Children[1].Name);
            Assert.AreEqual(expectedFileSystemTree2.Children[1].Children[1].Type, actualFileSystemTree2.Children[1].Children[1].Type);
            Assert.AreEqual(expectedFileSystemTree2.Children[1].Children[2].Name, actualFileSystemTree2.Children[1].Children[2].Name);
            Assert.AreEqual(expectedFileSystemTree2.Children[1].Children[2].Type, actualFileSystemTree2.Children[1].Children[2].Type);
        }
    }
}
