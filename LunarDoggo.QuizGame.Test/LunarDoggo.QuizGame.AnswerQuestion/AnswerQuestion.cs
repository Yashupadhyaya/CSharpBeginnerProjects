// ********RoostGPT********
/*
Test generated by RoostGPT for test testing-unit using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=AnswerQuestion_342cbd283c
ROOST_METHOD_SIG_HASH=AnswerQuestion_82d7e10041

   ########## Test-Scenarios ##########  

Scenario 1: Test For Valid Question Answering

Details:
  TestName: TestAnswerQuestionValidCase.
  Description: This test is meant to check the proper functionality of the AnswerQuestion method when a valid question is presented.

Execution:
  Arrange: Create a GameState instance with a set of unanswered questions. Set the CurrentQuestion to a valid QuizQuestion.
  Act: Invoke the AnswerQuestion method.
  Assert: Verify that the CurrentQuestion is removed from the unanswered questions and added to the given answers. Ensure that the IsCurrentQuestionAnswered is set to true and the ChosenAnswer is set to the correct answer.

Validation:
  This assertion verifies that the AnswerQuestion method correctly processes a valid question. The expected result is based on the method's intended functionality. The significance of this test lies in its validation of the primary function of the AnswerQuestion method.

Scenario 2: Test For Null Current Question

Details:
  TestName: TestAnswerQuestionNullCurrentQuestion.
  Description: This test is meant to check the AnswerQuestion method's handling of a null CurrentQuestion.

Execution:
  Arrange: Create a GameState instance with a set of unanswered questions. Set the CurrentQuestion to null.
  Act: Invoke the AnswerQuestion method.
  Assert: Verify that the unanswered questions and given answers remain unchanged and that the IsCurrentQuestionAnswered remains false.

Validation:
  This assertion verifies that the AnswerQuestion method correctly handles a null CurrentQuestion. The expected result is based on the method's intended error handling. This test is significant as it tests the method's robustness against invalid input.

Scenario 3: Test For Out Of Range Answer Index

Details:
  TestName: TestAnswerQuestionOutOfRangeAnswerIndex.
  Description: This test is meant to check the AnswerQuestion method's handling of an out-of-range highlightedAnswerIndex.

Execution:
  Arrange: Create a GameState instance with a set of unanswered questions. Set the CurrentQuestion to a valid QuizQuestion and the highlightedAnswerIndex to an out-of-range value.
  Act: Invoke the AnswerQuestion method.
  Assert: Verify that an appropriate exception is thrown.

Validation:
  This assertion verifies that the AnswerQuestion method correctly handles an out-of-range highlightedAnswerIndex. The expected result is based on the method's intended error handling. This test is significant as it tests the method's robustness against invalid internal states.

Scenario 4: Test For Duplicate Question Answering

Details:
  TestName: TestAnswerQuestionDuplicateQuestion.
  Description: This test is meant to check the AnswerQuestion method's handling of a question that has already been answered.

Execution:
  Arrange: Create a GameState instance with a set of unanswered questions. Set the CurrentQuestion to a valid QuizQuestion and answer it. Then, set the CurrentQuestion to the same question.
  Act: Invoke the AnswerQuestion method.
  Assert: Verify that an appropriate exception is thrown.

Validation:
  This assertion verifies that the AnswerQuestion method correctly handles a duplicate question. The expected result is based on the method's intended error handling. This test is significant as it tests the method's robustness against invalid scenarios.

================================VULNERABILITIES================================
Vulnerability: CWE-20: Improper Input Validation
Issue: The GameState constructor doesn't handle the case where 'questions' is an empty collection. This could lead to unexpected behavior if the program is ever called with no questions.
Solution: Add an explicit check for an empty collection and handle it appropriately. For example, you could throw an ArgumentException to indicate that the input is not valid.

Vulnerability: CWE-476: NULL Pointer Dereference
Issue: The AnswerQuestion method assumes that 'CurrentQuestion' is not null and that 'highlightedAnswerIndex' is a valid index for 'CurrentQuestion.Answers'. If these conditions are not met, the program will crash with an unhandled exception.
Solution: Add null checks and bounds checks where appropriate to prevent null reference exceptions and index out of range exceptions. Consider using the '?.', '??', or '??=' operators for null checks.

================================================================================

*/

// ********RoostGPT********
using NUnit.Framework;
using Moq;
using LunarDoggo.QuizGame;
using System;
using System.Collections.Generic;
using System.Linq;

namespace LunarDoggo.QuizGame.Test
{
    public class AnswerQuestionTest
    {
        private GameState gameState;
        private QuizQuestion quizQuestion;
        private QuizQuestionAnswer correctAnswer;
        private QuizQuestionAnswer incorrectAnswer;

        [SetUp]
        public void Setup()
        {
            correctAnswer = new QuizQuestionAnswer { Answer = "Correct", IsCorrect = true };
            incorrectAnswer = new QuizQuestionAnswer { Answer = "Incorrect", IsCorrect = false };

            quizQuestion = new QuizQuestion
            {
                Question = "Test Question",
                Answers = new QuizQuestionAnswer[] { correctAnswer, incorrectAnswer }
            };

            gameState = new GameState(new QuizQuestion[] { quizQuestion });
        }

        [Test]
        public void TestAnswerQuestionValidCase()
        {
            gameState.MoveToNextQuestion();
            gameState.AnswerQuestion(0);

            Assert.AreEqual(1, gameState.AnsweredQuestionCount);
            Assert.AreEqual(true, gameState.IsCurrentQuestionAnswered);
            Assert.AreEqual(correctAnswer, gameState.ChosenAnswer);
        }

        [Test]
        public void TestAnswerQuestionNullCurrentQuestion()
        {
            gameState.AnswerQuestion(0);

            Assert.AreEqual(0, gameState.AnsweredQuestionCount);
            Assert.AreEqual(false, gameState.IsCurrentQuestionAnswered);
        }

        [Test]
        public void TestAnswerQuestionOutOfRangeAnswerIndex()
        {
            gameState.MoveToNextQuestion();

            Assert.Throws<ArgumentOutOfRangeException>(() => gameState.AnswerQuestion(quizQuestion.Answers.Length + 1));
        }

        [Test]
        public void TestAnswerQuestionDuplicateQuestion()
        {
            gameState.MoveToNextQuestion();
            gameState.AnswerQuestion(0);
            gameState.MoveToNextQuestion();

            Assert.Throws<ArgumentException>(() => gameState.AnswerQuestion(0));
        }
    }
}
