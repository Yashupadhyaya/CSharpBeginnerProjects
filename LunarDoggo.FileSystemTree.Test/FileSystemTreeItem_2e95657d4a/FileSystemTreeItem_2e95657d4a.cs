// ********RoostGPT********
// Test generated by RoostGPT for test csharp-testing using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using NUnit.Framework;
using System;
using System.Collections.Generic;

namespace LunarDoggo.FileSystemTree.Test
{
    public enum FileSystemTreeItemType
    {
        File,
        Folder
    }

    public class FileSystemTreeItem
    {
        public string Name { get; set; }
        public FileSystemTreeItemType Type { get; set; }
        public List<FileSystemTreeItem> Children { get; set; }

        public FileSystemTreeItem(string name, FileSystemTreeItemType type, List<FileSystemTreeItem> children)
        {
            if (string.IsNullOrEmpty(name))
                throw new ArgumentException("Name cannot be null or empty");

            if (children == null)
                throw new ArgumentNullException("Children cannot be null");

            Name = name;
            Type = type;
            Children = children;
        }
    }

    [TestFixture]
    public class FileSystemTreeItem_2e95657d4a
    {
        [Test]
        public void Should_InitiateFileSystemTreeItem_When_CorrectParametersPassed()
        {
            // Arrange
            string expectedName = "testName";
            FileSystemTreeItemType expectedType = FileSystemTreeItemType.File;
            List<FileSystemTreeItem> expectedChildren = new List<FileSystemTreeItem>();

            // Act
            FileSystemTreeItem treeItem = new FileSystemTreeItem(expectedName, expectedType, expectedChildren);

            // Assert
            Assert.AreEqual(expectedName, treeItem.Name);
            Assert.AreEqual(expectedType, treeItem.Type);
            Assert.AreEqual(expectedChildren, treeItem.Children);
        }

        [Test]
        public void Should_ThrowArgumentNullException_When_NullChildrenPassed()
        {
            // Arrange
            string name = "testName";
            FileSystemTreeItemType type = FileSystemTreeItemType.File;
            List<FileSystemTreeItem> children = null;

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => new FileSystemTreeItem(name, type, children));
        }

        [Test]
        public void Should_ThrowArgumentException_When_EmptyNamePassed()
        {
            // Arrange
            string name = string.Empty;
            FileSystemTreeItemType type = FileSystemTreeItemType.File;
            List<FileSystemTreeItem> children = new List<FileSystemTreeItem>();

            // Act & Assert
            Assert.Throws<ArgumentException>(() => new FileSystemTreeItem(name, type, children));
        }
    }
}
