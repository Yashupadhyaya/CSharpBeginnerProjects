// Test generated by RoostGPT for test test-dummy using AI Type Open AI and AI Model gpt-4

using System;
using System.Collections.Generic;
using NUnit.Framework;

namespace FileSystemTreeTests
{
    public enum FileSystemTreeItemType
    {
        File,
        Directory
    }

    public class FileSystemTreeItem
    {
        public string name { get; set; }
        public FileSystemTreeItemType type { get; set; }
        public List<FileSystemTreeItem> children { get; set; }

        public FileSystemTreeItem(string name, FileSystemTreeItemType type, List<FileSystemTreeItem> children)
        {
            this.name = name;
            this.type = type;
            this.children = children;
        }
    }

    [TestFixture]
    public class FileSystemTreeItemTests
    {
        [Test]
        public void TestFileSystemTreeItem_FileSystemTreeItem_a6b8e2882a()
        {
            //Arrange
            var children = new List<FileSystemTreeItem>
            {
                new FileSystemTreeItem("Child1", FileSystemTreeItemType.File, null),
                new FileSystemTreeItem("Child2", FileSystemTreeItemType.File, null)
            };

            //Act
            var fileSystemTreeItem = new FileSystemTreeItem("TestItem", FileSystemTreeItemType.Directory, children);

            //Assert
            Assert.AreEqual("TestItem", fileSystemTreeItem.name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, fileSystemTreeItem.type);
            Assert.AreEqual(children, fileSystemTreeItem.children);
        }

        [Test]
        public void TestFileSystemTreeItem_NullChildren_a6b8e2882a()
        {
            //Arrange & Act
            var fileSystemTreeItem = new FileSystemTreeItem("TestItem", FileSystemTreeItemType.Directory, null);

            //Assert
            Assert.AreEqual("TestItem", fileSystemTreeItem.name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, fileSystemTreeItem.type);
            Assert.IsNull(fileSystemTreeItem.children);
        }
    }
}
