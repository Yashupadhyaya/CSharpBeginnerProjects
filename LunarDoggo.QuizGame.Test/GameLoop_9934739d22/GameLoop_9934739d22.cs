// ********RoostGPT********
// Test generated by RoostGPT for test csharp-testing using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System;
using System.Collections.Generic;
using NUnit.Framework;
using LunarDoggo.QuizGame;
using LunarDoggo.QuizGame.Visuals;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class GameLoop_9934739d22
    {
        private GameLoop gameLoop;
        private List<QuizQuestion> questions;
        private Mock<IVisualizer> visualizerMock;

        [SetUp]
        public void Setup()
        {
            visualizerMock = new Mock<IVisualizer>();

            questions = new List<QuizQuestion>
            {
                new QuizQuestion { Question = "Question 1", Answers = new QuizQuestionAnswer[] {
                    new QuizQuestionAnswer { Answer = "Answer 1", IsCorrect = true },
                    new QuizQuestionAnswer { Answer = "Answer 2", IsCorrect = false }
                }},
                new QuizQuestion { Question = "Question 2", Answers = new QuizQuestionAnswer[] {
                    new QuizQuestionAnswer { Answer = "Answer 3", IsCorrect = false },
                    new QuizQuestionAnswer { Answer = "Answer 4", IsCorrect = true }
                }}
            };

            gameLoop = new GameLoop(visualizerMock.Object, questions);
        }

        [Test]
        public void Test_GameLoop_Constructor()
        {
            Assert.IsNotNull(gameLoop);
            Assert.IsFalse(gameLoop.IsFinished);
        }

        [Test]
        public void Test_GameLoop_DoTick()
        {
            gameLoop.DoTick();

            visualizerMock.Verify(v => v.DrawGameStart(It.IsAny<int>()), Times.Once);
            visualizerMock.Verify(v => v.DrawQuizQuestion(It.IsAny<QuizQuestion>(), It.IsAny<Guid>()), Times.Never);
        }

        [Test]
        public void Test_GameLoop_DoTick_FinishesGame()
        {
            for (int i = 0; i < questions.Count; i++)
            {
                gameLoop.DoTick();
            }

            Assert.IsTrue(gameLoop.IsFinished);
            visualizerMock.Verify(v => v.DrawGameResult(It.IsAny<int>(), It.IsAny<int>()), Times.Once);
        }
    }
}
