// ********RoostGPT********
// Test generated by RoostGPT for test csharp-testing using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.QuizGame;
using LunarDoggo.QuizGame.Visuals;
using System.Collections.Generic;
using System;
using System.Linq;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class DoTick_de9d3caf03
    {
        private Mock<IVisualizer> visualizerMock;
        private List<QuizQuestion> questions;
        private GameLoop gameLoop;

        [SetUp]
        public void SetUp()
        {
            this.visualizerMock = new Mock<IVisualizer>(MockBehavior.Strict);

            this.questions = new List<QuizQuestion>
            {
                new QuizQuestion { Answers = new [] { new QuizQuestionAnswer { IsCorrect = true }, new QuizQuestionAnswer { IsCorrect = false } } },
                new QuizQuestion { Answers = new [] { new QuizQuestionAnswer { IsCorrect = false }, new QuizQuestionAnswer { IsCorrect = true } } }
            };

            this.gameLoop = new GameLoop(this.visualizerMock.Object, this.questions);
        }

        [Test]
        public void DoTick_NotFinished()
        {
            this.visualizerMock.Setup(v => v.DrawQuizQuestion(It.IsAny<QuizQuestion>(), It.IsAny<Guid>()));
            this.gameLoop.DoTick();
            Assert.IsFalse(gameLoop.IsFinished);
        }

        [Test]
        public void DoTick_Finished()
        {
            this.visualizerMock.Setup(v => v.DrawQuizQuestion(It.IsAny<QuizQuestion>(), It.IsAny<Guid>()));
            this.gameLoop.DoTick(); // answer first question
            this.gameLoop.DoTick(); // answer second question
            Assert.IsTrue(gameLoop.IsFinished);
        }
    }
}
