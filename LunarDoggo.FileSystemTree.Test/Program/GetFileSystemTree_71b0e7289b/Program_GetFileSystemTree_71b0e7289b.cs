// Test generated by RoostGPT for test demo56 using AI Type Open AI and AI Model gpt-4

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using Moq;
using LunarDoggo.FileSystemTree;

namespace LunarDoggo.FileSystemTree.Tests
{
    [TestFixture]
    public class Program_GetFileSystemTree_71b0e7289b
    {
        [Test]
        public void GetFileSystemTree_ValidDirectory_ReturnsCorrectTree()
        {
            // Arrange
            var baseDirectory = new DirectoryInfo(AppDomain.CurrentDomain.BaseDirectory);

            // Act
            var result = FileSystemTree.Program.GetFileSystemTree(baseDirectory);

            // Assert
            Assert.AreEqual(baseDirectory.Name, result.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);
            Assert.AreEqual(baseDirectory.GetDirectories().Length, result.Children.Count(item => item.Type == FileSystemTreeItemType.Directory));
            Assert.AreEqual(baseDirectory.GetFiles().Length, result.Children.Count(item => item.Type == FileSystemTreeItemType.File));
        }

        [Test]
        public void GetFileSystemTree_InvalidDirectory_ThrowsException()
        {
            // Arrange
            var baseDirectory = new DirectoryInfo("InvalidDirectory");

            // Act & Assert
            var ex = Assert.Throws<DirectoryNotFoundException>(() => FileSystemTree.Program.GetFileSystemTree(baseDirectory));
            Assert.That(ex.Message, Is.EqualTo("Could not find a part of the path 'InvalidDirectory'."));
        }

        [Test]
        public void GetFileSystemTree_NullDirectory_ThrowsArgumentNullException()
        {
            // Arrange
            DirectoryInfo baseDirectory = null;

            // Act & Assert
            var ex = Assert.Throws<ArgumentNullException>(() => FileSystemTree.Program.GetFileSystemTree(baseDirectory));
            Assert.That(ex.ParamName, Is.EqualTo("baseDirectory"));
        }

        [Test]
        public void GetFileSystemTree_EmptyDirectory_ReturnsOnlyDirectory()
        {
            // Arrange
            var baseDirectory = new DirectoryInfo("EmptyDirectory");
            Directory.CreateDirectory(baseDirectory.FullName);

            // Act
            var result = FileSystemTree.Program.GetFileSystemTree(baseDirectory);

            // Assert
            Assert.AreEqual(baseDirectory.Name, result.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);
            Assert.AreEqual(0, result.Children.Count);

            // Cleanup
            Directory.Delete(baseDirectory.FullName);
        }
    }
}
