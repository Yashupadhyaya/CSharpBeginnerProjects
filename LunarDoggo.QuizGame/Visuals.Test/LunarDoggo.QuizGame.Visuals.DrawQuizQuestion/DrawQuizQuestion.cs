// ********RoostGPT********
/*
Test generated by RoostGPT for test testing-unit using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=DrawQuizQuestion_70db40a7b3
ROOST_METHOD_SIG_HASH=DrawQuizQuestion_1d352aaa00

   ########## Test-Scenarios ##########  

Scenario 1: Valid QuizQuestion and HighlitedAnswerId

Details:
  TestName: TestDrawQuizQuestionWithValidInputs
  Description: This test is meant to check if the method DrawQuizQuestion can correctly output the provided QuizQuestion when given valid QuizQuestion and highlitedAnswerId.

Execution:
  Arrange: Create a valid QuizQuestion object and a Guid as highlitedAnswerId.
  Act: Invoke the DrawQuizQuestion method with the created QuizQuestion and highlitedAnswerId.
  Assert: Check if the method has correctly outputted the QuizQuestion and highlighted the correct answer.

Validation:
  The assertion aims to verify that the method correctly handles valid inputs and can output the QuizQuestion correctly. This test is significant as it checks the primary functionality of the method.

Scenario 2: Null QuizQuestion

Details:
  TestName: TestDrawQuizQuestionWithNullQuestion
  Description: This test is meant to check if the method DrawQuizQuestion handles a null QuizQuestion correctly.

Execution:
  Arrange: Create a null QuizQuestion object and a Guid as highlitedAnswerId.
  Act: Invoke the DrawQuizQuestion method with the null QuizQuestion and highlitedAnswerId.
  Assert: Check if the method throws an appropriate exception upon receiving a null QuizQuestion.

Validation:
  The assertion aims to verify that the method correctly handles null QuizQuestion and throws an appropriate exception. This test is significant as it checks the robustness of the method in handling erroneous inputs.

Scenario 3: HighlitedAnswerId not found in QuizQuestion

Details:
  TestName: TestDrawQuizQuestionWithInvalidHighlitedAnswerId
  Description: This test is meant to check if the method DrawQuizQuestion handles a highlitedAnswerId that does not exist in the provided QuizQuestion.

Execution:
  Arrange: Create a valid QuizQuestion object and a Guid as highlitedAnswerId that does not exist in the QuizQuestion's answers.
  Act: Invoke the DrawQuizQuestion method with the created QuizQuestion and highlitedAnswerId.
  Assert: Check if the method handles the non-existent highlitedAnswerId correctly.

Validation:
  The assertion aims to verify that the method correctly handles a highlitedAnswerId that does not exist in the QuizQuestion's answers. This test is significant as it checks the robustness of the method in handling erroneous inputs.

Scenario 4: QuizQuestion with no answers

Details:
  TestName: TestDrawQuizQuestionWithNoAnswers
  Description: This test is meant to check if the method DrawQuizQuestion handles a QuizQuestion with no answers correctly.

Execution:
  Arrange: Create a valid QuizQuestion object with no answers and a Guid as highlitedAnswerId.
  Act: Invoke the DrawQuizQuestion method with the created QuizQuestion and highlitedAnswerId.
  Assert: Check if the method handles the QuizQuestion with no answers correctly.

Validation:
  The assertion aims to verify that the method correctly handles a QuizQuestion with no answers. This test is significant as it checks the robustness of the method in handling edge cases.

================================VULNERABILITIES================================
Vulnerability: CWE-20: Improper Input Validation
Issue: The code does not validate input when reading from the console. This could potentially lead to issues if unexpected input is given, such as SQL injection or Cross-Site Scripting (XSS) attacks.
Solution: Add input validation to ensure that only the expected format of input is accepted. This can be done using regular expressions or other input validation techniques. Example: if you're expecting a 'Y' or 'N' response, make sure the input is either 'Y' or 'N' and nothing else.

Vulnerability: CWE-200: Information Exposure
Issue: The code exposes potentially sensitive information in console error messages. An attacker could use this information to learn more about the system and perform further attacks.
Solution: Avoid displaying sensitive information in error messages. Instead, log the detailed error information for debugging purposes and show a generic error message to the user. This reduces the risk of sensitive information exposure.

Vulnerability: CWE-209: Information Exposure Through an Error Message
Issue: The code reveals system-level details through error messages that could be leveraged by an attacker to exploit the system.
Solution: Handle exceptions in a way that do not reveal system-level details. Use try/catch blocks to catch exceptions and log them for internal use while displaying generic error messages to the user.

================================================================================

*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using Moq;
using LunarDoggo.QuizGame.Visuals;
using System.Collections.Generic;

namespace LunarDoggo.QuizGame.Visuals.Tests
{
    [TestFixture]
    public class DrawQuizQuestionTest
    {
        private Mock<IConsoleVisualizer> _consoleVisualizerMock;

        [SetUp]
        public void SetUp()
        {
            _consoleVisualizerMock = new Mock<IConsoleVisualizer>();
        }

        [Test]
        public void TestDrawQuizQuestionWithValidInputs()
        {
            Guid highlitedAnswerId = Guid.NewGuid();
            QuizQuestion question = new QuizQuestion 
            { 
                Question = "Test question", 
                Answers = new List<QuizQuestionAnswer>
                {
                    new QuizQuestionAnswer { Id = highlitedAnswerId, Answer = "Test answer" }
                }
            };

            _consoleVisualizerMock.Object.DrawQuizQuestion(question, highlitedAnswerId);

            _consoleVisualizerMock.Verify(x => x.DrawQuizQuestion(question, highlitedAnswerId), Times.Once);
        }

        [Test]
        public void TestDrawQuizQuestionWithNullQuestion()
        {
            Guid highlitedAnswerId = Guid.NewGuid();

            Assert.Throws<ArgumentNullException>(() => _consoleVisualizerMock.Object.DrawQuizQuestion(null, highlitedAnswerId));
        }

        [Test]
        public void TestDrawQuizQuestionWithInvalidHighlitedAnswerId()
        {
            Guid highlitedAnswerId = Guid.NewGuid();
            QuizQuestion question = new QuizQuestion 
            { 
                Question = "Test question", 
                Answers = new List<QuizQuestionAnswer>
                {
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Test answer" }
                }
            };

            Assert.DoesNotThrow(() => _consoleVisualizerMock.Object.DrawQuizQuestion(question, highlitedAnswerId));
        }

        [Test]
        public void TestDrawQuizQuestionWithNoAnswers()
        {
            Guid highlitedAnswerId = Guid.NewGuid();
            QuizQuestion question = new QuizQuestion 
            { 
                Question = "Test question", 
                Answers = new List<QuizQuestionAnswer>()
            };

            Assert.DoesNotThrow(() => _consoleVisualizerMock.Object.DrawQuizQuestion(question, highlitedAnswerId));
        }
    }
}
