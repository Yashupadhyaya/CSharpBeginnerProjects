// Test generated by RoostGPT for test unt-test using AI Type Azure Open AI and AI Model roost-gpt

using NUnit.Framework;
using System;
using System.Collections.Generic;

[TestFixture]
public class MoveToNextQuestionTests
{
    private GameState gameState;
    private List<Question> unansweredQuestions;

    [SetUp]
    public void SetUp()
    {
        gameState = new GameState();
        unansweredQuestions = new List<Question>
        {
            new Question("Question 1"),
            new Question("Question 2"),
            new Question("Question 3"),
            new Question("Question 4")
        };

        gameState.unansweredQuestions = unansweredQuestions;
    }

    [Test]
    public void MoveToNextQuestion_UnansweredQuestionsExist_MovesToNextQuestion()
    {
        // Arrange
        gameState.HasUnansweredQuestions = true;
        Random random = new Random();
        int questionIndex = random.Next(0, unansweredQuestions.Count);

        // Act
        gameState.MoveToNextQuestion();

        // Assert
        Assert.AreEqual(unansweredQuestions[questionIndex], gameState.CurrentQuestion);
        Assert.IsFalse(gameState.IsCurrentQuestionAnswered);
        Assert.AreEqual(0, gameState.highlightedAnswerIndex);
        Assert.IsNull(gameState.ChosenAnswer);
    }

    [Test]
    public void MoveToNextQuestion_NoUnansweredQuestions_DoesNotMoveToNextQuestion()
    {
        // Arrange
        gameState.HasUnansweredQuestions = false;
        gameState.CurrentQuestion = new Question("Current Question");
        gameState.IsCurrentQuestionAnswered = true;
        gameState.highlightedAnswerIndex = 2;
        gameState.ChosenAnswer = "Answer";

        // Act
        gameState.MoveToNextQuestion();

        // Assert
        Assert.AreEqual("Current Question", gameState.CurrentQuestion.Text);
        Assert.IsTrue(gameState.IsCurrentQuestionAnswered);
        Assert.AreEqual(2, gameState.highlightedAnswerIndex);
        Assert.AreEqual("Answer", gameState.ChosenAnswer);
    }
}

public class GameState
{
    public List<Question> unansweredQuestions;
    public bool HasUnansweredQuestions { get; set; }
    public Question CurrentQuestion { get; set; }
    public bool IsCurrentQuestionAnswered { get; set; }
    public int highlightedAnswerIndex { get; set; }
    public string ChosenAnswer { get; set; }

    public void MoveToNextQuestion()
    {
        if (HasUnansweredQuestions)
        {
            Random random = new Random();
            int questionIndex = random.Next(0, unansweredQuestions.Count);

            CurrentQuestion = unansweredQuestions[questionIndex];
            IsCurrentQuestionAnswered = false;
            highlightedAnswerIndex = 0;
            ChosenAnswer = null;
        }
    }
}

public class Question
{
    public string Text { get; set; }

    public Question(string text)
    {
        Text = text;
    }
}
