// Test generated by RoostGPT for test test-dummy using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using System.Collections.Immutable;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;

namespace FileSystemTreeTests
{
    public class FileSystemTreeItem
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public ImmutableList<FileSystemTreeItem> Children { get; set; }

        public FileSystemTreeItem(string name, string type, ImmutableList<FileSystemTreeItem> children = null)
        {
            Name = name;
            Type = type;
            Children = children ?? ImmutableList<FileSystemTreeItem>.Empty;
        }
    }

    public static class Program
    {
        public static void OutputFileSystemTreeLevel(int level, FileSystemTreeItem item)
        {
            Console.WriteLine(new string(' ', level * 2) + $"{item.Name} ({item.Type})");

            foreach (var child in item.Children)
            {
                OutputFileSystemTreeLevel(level + 1, child);
            }
        }
    }

    public class FileSystemTreeTests
    {
        [Test]
        public void TestOutputFileSystemTreeLevelWithChildren()
        {
            FileSystemTreeItem parent = new FileSystemTreeItem("parent", "folder", new List<FileSystemTreeItem>
            {
                new FileSystemTreeItem("child1", "file"),
                new FileSystemTreeItem("child2", "file")
            }.ToImmutableList());

            using (StringWriter sw = new StringWriter())
            {
                Console.SetOut(sw);

                Program.OutputFileSystemTreeLevel(0, parent);

                string expected = string.Format("parent (folder)\n  child1 (file)\n  child2 (file)\n");
                Assert.AreEqual(expected, sw.ToString());
            }
        }

        [Test]
        public void TestOutputFileSystemTreeLevelWithoutChildren()
        {
            FileSystemTreeItem parent = new FileSystemTreeItem("parent", "folder");

            using (StringWriter sw = new StringWriter())
            {
                Console.SetOut(sw);

                Program.OutputFileSystemTreeLevel(0, parent);

                string expected = string.Format("parent (folder)\n");
                Assert.AreEqual(expected, sw.ToString());
            }
        }
    }
}
