// ********RoostGPT********
/*
Test generated by RoostGPT for test testing-unit using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=DrawPlayAgain_8d5cb1938d
ROOST_METHOD_SIG_HASH=DrawPlayAgain_0355656c5f

   ########## Test-Scenarios ##########  

Scenario 1: Ensure that the method outputs the correct string

Details:
  TestName: TestDrawPlayAgainOutput
  Description: This test is meant to check if the "DrawPlayAgain" method outputs the correct string to the console. The expected output is "Do you like to play again? (Y/N)".

Execution:
  Arrange: Create an instance of the ConsoleVisualizer class. Set up a mock for the console output stream to capture the output.
  Act: Call the DrawPlayAgain method on the ConsoleVisualizer instance.
  Assert: Check if the output string matches the expected string "Do you like to play again? (Y/N)".

Validation:
  This assertion aims to verify that the method correctly outputs the string "Do you like to play again? (Y/N)" to the console. The expected result is based on the requirement that the method should ask the user if they would like to play the game again. This test is important to ensure that the user is receiving the correct prompt.

Scenario 2: Ensure that the method doesn't throw an exception 

Details:
  TestName: TestDrawPlayAgainNoException
  Description: This test is meant to check if the "DrawPlayAgain" method throws any exceptions when it is called.

Execution:
  Arrange: Create an instance of the ConsoleVisualizer class.
  Act: Call the DrawPlayAgain method on the ConsoleVisualizer instance.
  Assert: Check if any exceptions were thrown during the execution of the method.

Validation:
  This assertion aims to verify that the method doesn't throw any exceptions when it is called. The expected result is based on the requirement that the method should be able to be called without throwing any exceptions. This test is important to ensure that the application doesn't crash when the method is called.

Scenario 3: Ensure that the method only outputs one line

Details:
  TestName: TestDrawPlayAgainSingleLineOutput
  Description: This test is meant to check if the "DrawPlayAgain" method only outputs one line to the console.

Execution:
  Arrange: Create an instance of the ConsoleVisualizer class. Set up a mock for the console output stream to capture the output.
  Act: Call the DrawPlayAgain method on the ConsoleVisualizer instance.
  Assert: Check if the output string only contains one line.

Validation:
  This assertion aims to verify that the method only outputs one line to the console. The expected result is based on the requirement that the method should only output a single line asking the user if they would like to play the game again. This test is important to ensure that the console output is clean and easy to understand for the user.

================================VULNERABILITIES================================
Vulnerability: Input Validation (CWE-20)
Issue: The code does not perform any input validation when reading user inputs. This could potentially lead to issues if unexpected input is provided.
Solution: Implement input validation checks to ensure that the input matches the expected format and type. This can be done using regular expressions or by using built-in C# methods for parsing and validating input.

Vulnerability: Insecure Direct Object References (IDOR)
Issue: The code makes use of direct object references (Guid highlitedAnswerId) without any checks. This could potentially lead to unauthorized access if these references are manipulated.
Solution: Add checks to ensure that the object references are valid and that the user has the necessary permissions to access them. This can be done by adding a layer of abstraction between the user and the direct object references.

================================================================================

*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using Moq;
using System.IO;
using LunarDoggo.QuizGame.Visuals;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawPlayAgainTest
    {
        private ConsoleVisualizer _consoleVisualizer;
        private TextWriter _originalConsoleOut;
        private StringWriter _stringWriter;

        [SetUp]
        public void SetUp()
        {
            _consoleVisualizer = new ConsoleVisualizer();
            _originalConsoleOut = Console.Out;
            _stringWriter = new StringWriter();
            Console.SetOut(_stringWriter);
        }

        [TearDown]
        public void TearDown()
        {
            Console.SetOut(_originalConsoleOut);
        }

        [Test]
        public void TestDrawPlayAgainOutput()
        {
            _consoleVisualizer.DrawPlayAgain();
            string output = _stringWriter.ToString().Trim();

            Assert.AreEqual("Do you like to play again? (Y/N)", output);
        }

        [Test]
        public void TestDrawPlayAgainNoException()
        {
            Assert.DoesNotThrow(() => _consoleVisualizer.DrawPlayAgain());
        }

        [Test]
        public void TestDrawPlayAgainSingleLineOutput()
        {
            _consoleVisualizer.DrawPlayAgain();
            string output = _stringWriter.ToString();
            int lineCount = output.Split(new[] { Environment.NewLine }, StringSplitOptions.None).Length;

            Assert.AreEqual(1, lineCount);
        }
    }
}
