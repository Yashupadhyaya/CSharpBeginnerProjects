// Test generated by RoostGPT for test test-csrepo using AI Type Open AI and AI Model gpt-4

using System;
using NUnit.Framework;
using LunarDoggo.QuizGame.Visuals;
using LunarDoggo.QuizGame.Visuals.Test;
using Moq;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class ConsoleVisualizer_DrawQuizQuestion_545635e76d
    {
        private QuizQuestion _testQuestion;
        private Guid _testAnswerId;

        [SetUp]
        public void SetUp()
        {
            _testAnswerId = Guid.NewGuid();
            _testQuestion = new QuizQuestion
            {
                Question = "Test question",
                Answers = new List<QuizQuestionAnswer>
                {
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Wrong answer" },
                    new QuizQuestionAnswer { Id = _testAnswerId, Answer = "Right answer" }
                }
            };
        }

        [Test]
        public void DrawQuizQuestion_HighlightedAnswerIdExists_HighlightsCorrectAnswer()
        {
            var consoleMock = new Mock<IConsole>();

            var visualizer = new ConsoleVisualizer(consoleMock.Object);
            visualizer.DrawQuizQuestion(_testQuestion, _testAnswerId);

            consoleMock.Verify(c => c.WriteLine(It.Is<string>(s => s.Contains("Right answer"))), Times.Once);
            consoleMock.Verify(c => c.WriteLine(It.Is<string>(s => s.Contains("Wrong answer"))), Times.Once);
        }

        [Test]
        public void DrawQuizQuestion_HighlightedAnswerIdDoesNotExist_DoesNotHighlightAnyAnswer()
        {
            var consoleMock = new Mock<IConsole>();

            var visualizer = new ConsoleVisualizer(consoleMock.Object);
            visualizer.DrawQuizQuestion(_testQuestion, Guid.NewGuid());

            consoleMock.Verify(c => c.WriteLine(It.Is<string>(s => s.Contains("Right answer"))), Times.Once);
            consoleMock.Verify(c => c.WriteLine(It.Is<string>(s => s.Contains("Wrong answer"))), Times.Once);
        }
    }
}
