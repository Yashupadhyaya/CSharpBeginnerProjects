// Test generated by RoostGPT for test unt-test using AI Type Azure Open AI and AI Model roost-gpt

using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace YourTestProjectNamespace
{
    public class is_GameState_411dc2bb34
    {
        [Test]
        public void GameState_WithNullQuestions_DoesNotAddQuestionsToUnansweredQuestions()
        {
            // Arrange
            IEnumerable<QuizQuestion> questions = null;
            GameState gameState = new GameState(questions);

            // Act
            int unansweredQuestionCount = gameState.unansweredQuestions.Count;

            // Assert
            Assert.Zero(unansweredQuestionCount);
        }

        [Test]
        public void GameState_WithEmptyQuestionsList_DoesNotAddQuestionsToUnansweredQuestions()
        {
            // Arrange
            IEnumerable<QuizQuestion> questions = new List<QuizQuestion>();
            GameState gameState = new GameState(questions);

            // Act
            int unansweredQuestionCount = gameState.unansweredQuestions.Count;

            // Assert
            Assert.Zero(unansweredQuestionCount);
        }

        [Test]
        public void GameState_WithQuestions_AddsQuestionsToUnansweredQuestions()
        {
            // Arrange
            List<QuizQuestion> questions = new List<QuizQuestion>
            {
                new QuizQuestion("Question 1"),
                new QuizQuestion("Question 2"),
                new QuizQuestion("Question 3")
            };
            GameState gameState = new GameState(questions);

            // Act
            int unansweredQuestionCount = gameState.unansweredQuestions.Count;

            // Assert
            Assert.AreEqual(3, unansweredQuestionCount);
        }

        [Test]
        public void GameState_WithNullQuestions_SetsTotalQuestionCountToZero()
        {
            // Arrange
            IEnumerable<QuizQuestion> questions = null;
            GameState gameState = new GameState(questions);

            // Act
            int totalQuestionCount = gameState.TotalQuestionCount;

            // Assert
            Assert.Zero(totalQuestionCount);
        }

        [Test]
        public void GameState_WithEmptyQuestionsList_SetsTotalQuestionCountToZero()
        {
            // Arrange
            IEnumerable<QuizQuestion> questions = new List<QuizQuestion>();
            GameState gameState = new GameState(questions);

            // Act
            int totalQuestionCount = gameState.TotalQuestionCount;

            // Assert
            Assert.Zero(totalQuestionCount);
        }

        [Test]
        public void GameState_WithQuestions_SetsTotalQuestionCountToNumberOfQuestions()
        {
            // Arrange
            List<QuizQuestion> questions = new List<QuizQuestion>
            {
                new QuizQuestion("Question 1"),
                new QuizQuestion("Question 2"),
                new QuizQuestion("Question 3")
            };
            GameState gameState = new GameState(questions);

            // Act
            int totalQuestionCount = gameState.TotalQuestionCount;

            // Assert
            Assert.AreEqual(3, totalQuestionCount);
        }
    }

    public class GameState
    {
        public List<QuizQuestion> unansweredQuestions;

        public int TotalQuestionCount { get; set; }

        public GameState(IEnumerable<QuizQuestion> questions)
        {
            if (questions != null && questions.Any())
            {
                this.unansweredQuestions = new List<QuizQuestion>();
                this.unansweredQuestions.AddRange(questions);
                this.TotalQuestionCount = this.unansweredQuestions.Count;
            }
            else
            {
                this.unansweredQuestions = new List<QuizQuestion>();
                this.TotalQuestionCount = 0;
            }
        }
    }

    public class QuizQuestion
    {
        public string QuestionText { get; set; }

        public QuizQuestion(string questionText)
        {
            this.QuestionText = questionText;
        }
    }
}
