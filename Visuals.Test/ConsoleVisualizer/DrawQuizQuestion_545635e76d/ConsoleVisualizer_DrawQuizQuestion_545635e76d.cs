// Test generated by RoostGPT for test unt-test using AI Type Azure Open AI and AI Model roost-gpt

using NUnit.Framework;
using System;
using System.IO;

public class ConsoleVisualizer_DrawQuizQuestion_545635e76d
{
    [Test]
    public void DrawQuizQuestion_ShouldPrintQuestionAndAnswers()
    {
        // Arrange
        string expectedQuestion = "What is the capital of France?";
        QuizQuestionAnswer[] expectedAnswers = new QuizQuestionAnswer[]
        {
            new QuizQuestionAnswer("London", Guid.NewGuid()),
            new QuizQuestionAnswer("Paris", Guid.NewGuid()),
            new QuizQuestionAnswer("Berlin", Guid.NewGuid()),
            new QuizQuestionAnswer("Madrid", Guid.NewGuid())
        };
        QuizQuestion question = new QuizQuestion(expectedQuestion, expectedAnswers);
        Guid highlitedAnswerId = Guid.Empty;
        
        using StringWriter stringWriter = new StringWriter();
        Console.SetOut(stringWriter);
        
        // Act
        DrawQuizQuestion(question, highlitedAnswerId);
        string output = stringWriter.ToString().Trim();
        
        // Assert
        Assert.That(output, Contains.Substring(expectedQuestion));
        foreach (QuizQuestionAnswer answer in expectedAnswers)
        {
            Assert.That(output, Contains.Substring(answer.Text));
        }
    }
    
    [Test]
    public void DrawQuizQuestion_ShouldHighlightSpecifiedAnswer()
    {
        // Arrange
        string questionText = "What is the color of the sky?";
        QuizQuestionAnswer[] answers = new QuizQuestionAnswer[]
        {
            new QuizQuestionAnswer("Red", Guid.NewGuid()),
            new QuizQuestionAnswer("Blue", Guid.NewGuid()),
            new QuizQuestionAnswer("Green", Guid.NewGuid())
        };
        QuizQuestion question = new QuizQuestion(questionText, answers);
        Guid highlitedAnswerId = answers[1].Id;
        
        using StringWriter stringWriter = new StringWriter();
        Console.SetOut(stringWriter);
        
        // Act
        DrawQuizQuestion(question, highlitedAnswerId);
        string output = stringWriter.ToString().Trim();
        
        // Assert
        Assert.That(output, Contains.Substring(questionText));
        foreach (QuizQuestionAnswer answer in answers)
        {
            bool expectedHighlight = answer.Id == highlitedAnswerId;
            string expectedAnswer = expectedHighlight ? $"[X] {answer.Text}" : $"[ ] {answer.Text}";
            Assert.That(output, Contains.Substring(expectedAnswer));
        }
    }
    
    // Helper classes for testing
    
    public class QuizQuestion
    {
        public string Question { get; }
        public QuizQuestionAnswer[] Answers { get; }
        
        public QuizQuestion(string question, QuizQuestionAnswer[] answers)
        {
            Question = question;
            Answers = answers;
        }
    }
    
    public class QuizQuestionAnswer
    {
        public string Text { get; }
        public Guid Id { get; }
        
        public QuizQuestionAnswer(string text, Guid id)
        {
            Text = text;
            Id = id;
        }
    }
    
    public void DrawQuizQuestion(QuizQuestion question, Guid highlitedAnswerId)
    {
        Console.Clear();
        Console.WriteLine(question.Question);
        Console.WriteLine();
        foreach (QuizQuestionAnswer answer in question.Answers)
        {
            DrawQuizQuestionAnswer(answer, answer.Id == highlitedAnswerId);
        }
        Console.WriteLine();
        Console.WriteLine();
    }
    
    private void DrawQuizQuestionAnswer(QuizQuestionAnswer answer, bool isHighlighted)
    {
        if (isHighlighted)
        {
            Console.WriteLine($"[X] {answer.Text}");
        }
        else
        {
            Console.WriteLine($"[ ] {answer.Text}");
        }
    }
}
