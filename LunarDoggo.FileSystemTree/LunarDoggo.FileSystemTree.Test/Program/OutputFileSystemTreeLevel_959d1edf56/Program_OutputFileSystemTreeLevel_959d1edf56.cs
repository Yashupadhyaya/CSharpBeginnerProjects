// Test generated by RoostGPT for test unt-test using AI Type Azure Open AI and AI Model roost-gpt

using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace LunarDoggo.FileSystemTree
{
    public class FileSystemTreeItem
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public List<FileSystemTreeItem> Children { get; set; }
    }

    public class Program
    {
        private static void OutputFileSystemTreeLevel(int indentationLevel, FileSystemTreeItem item)
        {
            string indentation = new string(Enumerable.Repeat(' ', indentationLevel * 2).ToArray());
            Console.WriteLine(indentation + item.Name + " (" + item.Type + ")");

            if (item.Children != null && item.Children.Count() > 0)
            {
                foreach (FileSystemTreeItem child in item.Children)
                {
                    Program.OutputFileSystemTreeLevel(indentationLevel + 1, child);
                }
            }
        }

        // Test case for FileSystemTreeItem with no children
        [Test]
        public void TestOutputFileSystemTreeLevel_WithNoChildren()
        {
            FileSystemTreeItem item = new FileSystemTreeItem()
            {
                Name = "File1",
                Type = "File",
                Children = new List<FileSystemTreeItem>()
            };

            StringWriter sw = new StringWriter();
            Console.SetOut(sw);

            Program.OutputFileSystemTreeLevel(0, item);

            string expectedOutput = "File1 (File)" + Environment.NewLine;

            Assert.AreEqual(expectedOutput, sw.ToString());
        }

        // Test case for FileSystemTreeItem with children
        [Test]
        public void TestOutputFileSystemTreeLevel_WithChildren()
        {
            FileSystemTreeItem child1 = new FileSystemTreeItem()
            {
                Name = "Subfolder1",
                Type = "Folder",
                Children = new List<FileSystemTreeItem>()
                {
                    new FileSystemTreeItem()
                    {
                        Name = "File2",
                        Type = "File",
                        Children = new List<FileSystemTreeItem>()
                    },
                    new FileSystemTreeItem()
                    {
                        Name = "File3",
                        Type = "File",
                        Children = new List<FileSystemTreeItem>()
                    }
                }
            };

            FileSystemTreeItem child2 = new FileSystemTreeItem()
            {
                Name = "Subfolder2",
                Type = "Folder",
                Children = new List<FileSystemTreeItem>()
            };

            FileSystemTreeItem item = new FileSystemTreeItem()
            {
                Name = "Folder1",
                Type = "Folder",
                Children = new List<FileSystemTreeItem>()
                {
                    child1,
                    child2
                }
            };

            StringWriter sw = new StringWriter();
            Console.SetOut(sw);

            Program.OutputFileSystemTreeLevel(0, item);

            string expectedOutput =
                "Folder1 (Folder)" + Environment.NewLine +
                "  Subfolder1 (Folder)" + Environment.NewLine +
                "    File2 (File)" + Environment.NewLine +
                "    File3 (File)" + Environment.NewLine +
                "  Subfolder2 (Folder)" + Environment.NewLine;

            Assert.AreEqual(expectedOutput, sw.ToString());
        }
    }
}
