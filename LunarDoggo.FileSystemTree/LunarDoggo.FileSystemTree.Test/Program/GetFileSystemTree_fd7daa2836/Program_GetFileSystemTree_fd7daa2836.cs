// Test generated by RoostGPT for test efghi using AI Type Open AI and AI Model gpt-4

using System.Collections.Immutable;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;
using NUnit.Framework;
using LunarDoggo.FileSystemTree;

namespace LunarDoggo.FileSystemTree.Tests
{
    [TestFixture]
    public class ProgramTests
    {
        [Test]
        public void TestProgram_GetFileSystemTree_fd7daa2836()
        {
            // TODO: Replace with a real directory for testing
            DirectoryInfo baseDirectory = new DirectoryInfo("C:\\testDirectory");

            // Call the method under test
            FileSystemTreeItem result = Program.GetFileSystemTree(baseDirectory);

            // Assert that the root directory is correct
            Assert.AreEqual(baseDirectory.Name, result.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);

            // Assert that the expected number of subdirectories and files match the actual number
            Assert.AreEqual(baseDirectory.GetDirectories().Length, result.Children.Count(item => item.Type == FileSystemTreeItemType.Directory));
            Assert.AreEqual(baseDirectory.GetFiles().Length, result.Children.Count(item => item.Type == FileSystemTreeItemType.File));
        }

        [Test]
        public void TestProgram_GetFileSystemTree_fd7daa2836_WithNonExistentDirectory()
        {
            // TODO: Replace with a non-existent directory for testing
            DirectoryInfo baseDirectory = new DirectoryInfo("C:\\nonExistentDirectory");

            // Call the method under test and expect an exception
            var ex = Assert.Throws<DirectoryNotFoundException>(() => Program.GetFileSystemTree(baseDirectory));

            // Assert that the exception message is as expected
            Assert.That(ex.Message, Is.EqualTo("Could not find a part of the path '" + baseDirectory.FullName + "'."));
        }
    }
}
