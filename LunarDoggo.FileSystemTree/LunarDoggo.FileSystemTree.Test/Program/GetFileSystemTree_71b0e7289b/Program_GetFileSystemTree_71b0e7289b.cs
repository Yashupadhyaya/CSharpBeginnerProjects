// Test generated by RoostGPT for test int-test using AI Type Open AI and AI Model gpt-3.5-turbo-0301

using System.Collections.Immutable;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;

namespace FileSystemTree
{
    [TestClass]
    public class FileSystemTreeTests
    {
        [TestMethod]
        public void TestProgram_GetFileSystemTree_71b0e7289b_Success()
        {
            //Arrange
            DirectoryInfo directory = new DirectoryInfo(@"C:\Users\UserName\Documents");

            //Act
            FileSystemTreeItem result = Program.GetFileSystemTree(directory);

            //Assert
            Assert.IsNotNull(result);
            Assert.AreEqual("Documents", result.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);
            Assert.IsNotNull(result.Children);
            Assert.IsTrue(result.Children.Count > 0);
        }

        [TestMethod]
        public void TestProgram_GetFileSystemTree_71b0e7289b_InvalidDirectory()
        {
            //Arrange
            DirectoryInfo directory = new DirectoryInfo(@"C:\InvalidDirectory");

            //Act
            FileSystemTreeItem result = Program.GetFileSystemTree(directory);

            //Assert
            Assert.IsNull(result);
        }
    }

    public static class Program
    {
        private static FileSystemTreeItem GetFileSystemTree(DirectoryInfo baseDirectory)
        {
            //Read all subdirectories and files from the current baseDirectory
            DirectoryInfo[] subdirectories = baseDirectory.GetDirectories();
            FileInfo[] files = baseDirectory.GetFiles();

            List<FileSystemTreeItem> children = new List<FileSystemTreeItem>();

            //First recursively add all subdirectories with its children to the current tree item
            foreach (DirectoryInfo subdirectory in subdirectories)
            {
                //add all tree items from 
                children.Add(Program.GetFileSystemTree(subdirectory));
            }

            //Lastly add all files of the current tree item
            foreach (FileInfo file in files)
            {
                children.Add(new FileSystemTreeItem(file.Name, FileSystemTreeItemType.File, null));
            }

            return new FileSystemTreeItem(baseDirectory.Name, FileSystemTreeItemType.Directory, children.ToImmutableArray());
        }

        static void Main(string[] args)
        {
            DirectoryInfo directory = new DirectoryInfo(@"C:\Users\UserName\Documents");
            FileSystemTreeItem result = Program.GetFileSystemTree(directory);
            Console.WriteLine(result);
        }
    }

    public enum FileSystemTreeItemType
    {
        Directory,
        File
    }

    public class FileSystemTreeItem
    {
        public string Name { get; }
        public FileSystemTreeItemType Type { get; }
        public ImmutableArray<FileSystemTreeItem> Children { get; }

        public FileSystemTreeItem(string name, FileSystemTreeItemType type, ImmutableArray<FileSystemTreeItem> children)
        {
            this.Name = name;
            this.Type = type;
            this.Children = children;
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            this.Print(sb, "");
            return sb.ToString();
        }

        private void Print(StringBuilder sb, string indent)
        {
            sb.Append(indent);
            sb.Append(this.Name);
            sb.Append(" (");
            sb.Append(this.Type);
            sb.AppendLine(")");

            foreach (FileSystemTreeItem child in this.Children)
            {
                child.Print(sb, indent + "  ");
            }
        }
    }
}
