// Test generated by RoostGPT for test test-dummy using AI Type Open AI and AI Model gpt-4

using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Collections.Immutable;
using NUnit.Framework;

namespace LunarDoggo.FileSystemTree
{
    [TestFixture]
    public class TestProgram_GetBaseDirectoryPath_7667d18cd1
    {
        private string originalPath;
        
        [SetUp]
        public void Setup()
        {
            originalPath = Directory.GetCurrentDirectory();
        }

        [Test]
        public void TestValidDirectoryPath()
        {
            string testPath = @"C:\Windows"; // TODO: Replace this with a valid directory path on your machine
            
            // Set the Console input to our test path
            using (StringReader sr = new StringReader(testPath))
            {
                Console.SetIn(sr);

                string result = Program.GetBaseDirectoryPath();
                Assert.AreEqual(testPath, result, "Expected the method to return the valid directory path entered.");
            }
        }

        [Test]
        public void TestInvalidDirectoryPath()
        {
            string testPath = @"C:\Invalid\Path"; // TODO: Replace this with an invalid directory path
            
            // Set the Console input to our test path
            using (StringReader sr = new StringReader(testPath))
            {
                Console.SetIn(sr);

                try
                {
                    string result = Program.GetBaseDirectoryPath();
                    Assert.Fail("Expected an exception to be thrown for an invalid directory path.");
                }
                catch (Exception ex)
                {
                    Assert.IsTrue(ex is DirectoryNotFoundException, "Expected a DirectoryNotFoundException to be thrown for an invalid directory path.");
                }
            }
        }

        [TearDown]
        public void TearDown()
        {
            // Reset the Console input to its original state
            using (StreamReader sr = new StreamReader(Console.OpenStandardInput()))
            {
                Console.SetIn(sr);
                Directory.SetCurrentDirectory(originalPath);
            }
        }
    }
}
