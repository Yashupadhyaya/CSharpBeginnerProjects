// Test generated by RoostGPT for test test-dummy using AI Type Open AI and AI Model gpt-4

using System.Collections.Immutable;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;
using NUnit.Framework;

namespace LunarDoggo.FileSystemTree
{
    [TestFixture]
    public class FileSystemTreeTests
    {
        [Test]
        public void TestProgram_GetFileSystemTree_fd7daa2836()
        {
            // TODO: Replace with valid directory path
            string testDirectoryPath = "C:\\TestDirectory";
            DirectoryInfo testDirectory = new DirectoryInfo(testDirectoryPath);

            FileSystemTreeItem result = Program.GetFileSystemTree(testDirectory);

            Assert.AreEqual(testDirectory.Name, result.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);
            Assert.IsTrue(result.Children.Any());

            // Ensuring that files and directories are being correctly added
            foreach (var child in result.Children)
            {
                if (child.Type == FileSystemTreeItemType.File)
                {
                    Assert.IsTrue(File.Exists(Path.Combine(testDirectoryPath, child.Name)));
                }
                else
                {
                    Assert.IsTrue(Directory.Exists(Path.Combine(testDirectoryPath, child.Name)));
                }
            }
        }

        [Test]
        public void TestProgram_GetFileSystemTree_fd7daa2836_InvalidDirectory()
        {
            // TODO: Replace with invalid directory path
            string invalidDirectoryPath = "C:\\InvalidDirectory";
            DirectoryInfo invalidDirectory = new DirectoryInfo(invalidDirectoryPath);

            var ex = Assert.Throws<DirectoryNotFoundException>(() => Program.GetFileSystemTree(invalidDirectory));
            Assert.That(ex.Message, Is.EqualTo("Could not find a part of the path '" + invalidDirectoryPath + "'."));
        }
    }
}
