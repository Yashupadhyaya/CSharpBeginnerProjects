// ********RoostGPT********
// Test generated by RoostGPT for test csharp-testing using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using LunarDoggo.QuizGame;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class GameState_3381fc8da9
    {
        private GameState gameState;

        [SetUp]
        public void Setup()
        {
            // TODO: update the input values as per the requirements
            List<QuizQuestion> questions = new List<QuizQuestion>
            {
                new QuizQuestion { Question = "Question1", Answers = new QuizQuestionAnswer[] { new QuizQuestionAnswer { Answer = "Answer1", IsCorrect = true } } },
                new QuizQuestion { Question = "Question2", Answers = new QuizQuestionAnswer[] { new QuizQuestionAnswer { Answer = "Answer2", IsCorrect = false } } }
            };

            gameState = new GameState(questions);
        }

        [Test]
        public void GameStateConstructor_WhenQuestionsAreNotNullAndNotEmpty_ShouldSetTotalQuestionCount()
        {
            Assert.AreEqual(2, gameState.TotalQuestionCount);
        }

        [Test]
        public void GameStateConstructor_WhenQuestionsAreNull_ShouldNotThrowException()
        {
            Assert.DoesNotThrow(() => new GameState(null));
        }

        [Test]
        public void GameStateConstructor_WhenQuestionsAreEmpty_ShouldNotThrowException()
        {
            Assert.DoesNotThrow(() => new GameState(new List<QuizQuestion>()));
        }

        [Test]
        public void GameStateConstructor_WhenQuestionsAreNull_ShouldSetTotalQuestionCountToZero()
        {
            GameState gameState = new GameState(null);
            Assert.AreEqual(0, gameState.TotalQuestionCount);
        }

        [Test]
        public void GameStateConstructor_WhenQuestionsAreEmpty_ShouldSetTotalQuestionCountToZero()
        {
            GameState gameState = new GameState(new List<QuizQuestion>());
            Assert.AreEqual(0, gameState.TotalQuestionCount);
        }
    }
}
