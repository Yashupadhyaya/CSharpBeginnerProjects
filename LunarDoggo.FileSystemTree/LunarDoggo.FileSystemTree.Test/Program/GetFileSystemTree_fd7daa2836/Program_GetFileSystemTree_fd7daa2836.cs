// Test generated by RoostGPT for test roost-test using AI Model gpt

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using NUnit.Framework;

namespace LunarDoggo.FileSystemTree
{
    public class FileSystemTreeItem
    {
        public string Name { get; set; }
        public FileSystemTreeItemType Type { get; set; }
        public ImmutableArray<FileSystemTreeItem> Children { get; set; }

        public FileSystemTreeItem(string name, FileSystemTreeItemType type, ImmutableArray<FileSystemTreeItem> children)
        {
            Name = name;
            Type = type;
            Children = children;
        }
    }

    public enum FileSystemTreeItemType
    {
        Directory,
        File
    }

    public class Program
    {
        private static FileSystemTreeItem GetFileSystemTree(DirectoryInfo baseDirectory)
        {
            DirectoryInfo[] subdirectories = baseDirectory.GetDirectories();
            FileInfo[] files = baseDirectory.GetFiles();

            List<FileSystemTreeItem> children = new List<FileSystemTreeItem>();

            foreach (DirectoryInfo subdirectory in subdirectories)
            {
                children.Add(Program.GetFileSystemTree(subdirectory));
            }

            foreach (FileInfo file in files)
            {
                children.Add(new FileSystemTreeItem(file.Name, FileSystemTreeItemType.File, null));
            }

            return new FileSystemTreeItem(baseDirectory.Name, FileSystemTreeItemType.Directory, children.ToImmutableArray());
        }

        [TestFixture]
        public class TestProgram_GetFileSystemTree_fd7daa2836
        {
            [Test]
            public void TestEmptyDirectory()
            {
                // TODO: Change the path to an empty directory on your system
                string emptyDirectoryPath = @"C:\empty_directory";
                DirectoryInfo emptyDirectoryInfo = new DirectoryInfo(emptyDirectoryPath);

                FileSystemTreeItem result = Program.GetFileSystemTree(emptyDirectoryInfo);

                Assert.AreEqual(emptyDirectoryInfo.Name, result.Name);
                Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);
                Assert.IsEmpty(result.Children);
            }

            [Test]
            public void TestDirectoryWithFilesAndSubdirectories()
            {
                // TODO: Change the path to a directory with files and subdirectories on your system
                string directoryPath = @"C:\test_directory";
                DirectoryInfo directoryInfo = new DirectoryInfo(directoryPath);

                FileSystemTreeItem result = Program.GetFileSystemTree(directoryInfo);

                Assert.AreEqual(directoryInfo.Name, result.Name);
                Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);
                Assert.IsNotEmpty(result.Children);

                int expectedFileCount = directoryInfo.GetFiles().Length;
                int actualFileCount = result.Children.Count(item => item.Type == FileSystemTreeItemType.File);
                Assert.AreEqual(expectedFileCount, actualFileCount);

                int expectedSubdirectoryCount = directoryInfo.GetDirectories().Length;
                int actualSubdirectoryCount = result.Children.Count(item => item.Type == FileSystemTreeItemType.Directory);
                Assert.AreEqual(expectedSubdirectoryCount, actualSubdirectoryCount);
            }
        }
    }
}