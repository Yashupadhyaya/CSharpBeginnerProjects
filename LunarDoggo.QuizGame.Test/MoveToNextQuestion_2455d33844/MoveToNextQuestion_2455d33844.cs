// ********RoostGPT********
// Test generated by RoostGPT for test csharp-testing using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System.Collections.Generic;
using System.Linq;
using System;
using NUnit.Framework;
using LunarDoggo.QuizGame;


namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class MoveToNextQuestion_2455d33844
    {
        private GameState gameState;
        private List<QuizQuestion> questions;

        [SetUp]
        public void Setup()
        {
            questions = new List<QuizQuestion>
            {
                new QuizQuestion
                {
                    Question = "Question 1",
                    Answers = new QuizQuestionAnswer[]
                    {
                        new QuizQuestionAnswer { Answer = "Answer 1", IsCorrect = false },
                        new QuizQuestionAnswer { Answer = "Answer 2", IsCorrect = true }
                    }
                },
                new QuizQuestion
                {
                    Question = "Question 2",
                    Answers = new QuizQuestionAnswer[]
                    {
                        new QuizQuestionAnswer { Answer = "Answer 1", IsCorrect = true },
                        new QuizQuestionAnswer { Answer = "Answer 2", IsCorrect = false }
                    }
                }
            };

            gameState = new GameState(questions);
        }

        [Test]
        public void TestMoveToNextQuestion_WhenThereAreUnansweredQuestions()
        {
            gameState.MoveToNextQuestion();

            Assert.IsNotNull(gameState.CurrentQuestion);
            Assert.IsFalse(gameState.IsCurrentQuestionAnswered);
            Assert.AreEqual(0, gameState.AnsweredQuestionCount);
            Assert.IsNull(gameState.ChosenAnswer);
        }

        [Test]
        public void TestMoveToNextQuestion_WhenNoUnansweredQuestions()
        {
            gameState.MoveToNextQuestion();
            gameState.AnswerQuestion();
            gameState.MoveToNextQuestion();
            gameState.AnswerQuestion();

            Assert.IsFalse(gameState.HasUnansweredQuestions);
            Assert.IsNull(gameState.CurrentQuestion);
        }
    }
}
