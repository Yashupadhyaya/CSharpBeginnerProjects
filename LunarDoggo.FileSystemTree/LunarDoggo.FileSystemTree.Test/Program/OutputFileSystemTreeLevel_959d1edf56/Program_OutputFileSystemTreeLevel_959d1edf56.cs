// Test generated by RoostGPT for test int-test using AI Type Open AI and AI Model gpt-3.5-turbo-0301

using NUnit.Framework;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;

namespace FileSystemTree.Tests
{
    [TestFixture]
    public class FileSystemTreeTests
    {
        [Test]
        public void TestProgram_OutputFileSystemTreeLevel_959d1edf56()
        {
            // Arrange
            var root = new FileSystemTreeItem("Root", ItemType.Folder);
            var folder1 = new FileSystemTreeItem("Folder1", ItemType.Folder);
            var folder2 = new FileSystemTreeItem("Folder2", ItemType.Folder);
            var file1 = new FileSystemTreeItem("File1.txt", ItemType.File);
            var file2 = new FileSystemTreeItem("File2.txt", ItemType.File);

            root.Children = new List<FileSystemTreeItem> { folder1, folder2 };
            folder1.Children = new List<FileSystemTreeItem> { file1 };
            folder2.Children = new List<FileSystemTreeItem> { file2 };

            var expectedOutput = "Root (Folder)\n  Folder1 (Folder)\n    File1.txt (File)\n  Folder2 (Folder)\n    File2.txt (File)\n";

            // Act
            using (var consoleOutput = new ConsoleOutput())
            {
                Program.OutputFileSystemTreeLevel(0, root);
                var actualOutput = consoleOutput.GetOutput();

                // Assert
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [Test]
        public void TestProgram_OutputFileSystemTreeLevel_WithNoChildren()
        {
            // Arrange
            var root = new FileSystemTreeItem("Root", ItemType.Folder);

            var expectedOutput = "Root (Folder)\n";

            // Act
            using (var consoleOutput = new ConsoleOutput())
            {
                Program.OutputFileSystemTreeLevel(0, root);
                var actualOutput = consoleOutput.GetOutput();

                // Assert
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }
    }

    public class ConsoleOutput : IDisposable
    {
        private StringWriter stringWriter;
        private TextWriter originalOutput;

        public ConsoleOutput()
        {
            stringWriter = new StringWriter();
            originalOutput = Console.Out;
            Console.SetOut(stringWriter);
        }

        public string GetOutput()
        {
            return stringWriter.ToString();
        }

        public void Dispose()
        {
            Console.SetOut(originalOutput);
            stringWriter.Dispose();
        }
    }
}
