// Test generated by RoostGPT for test unt-test using AI Type Azure Open AI and AI Model roost-gpt

using LunarDoggo.FileSystemTree;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;

namespace LunarDoggo.FileSystemTree.Tests
{
    [TestFixture]
    public class ProgramTests
    {
        [Test]
        public void TestOutputFileSystemTreeLevel()
        {
            // Arrange
            var file1 = new FileSystemTreeItem("File1.txt", FileType.File);
            var file2 = new FileSystemTreeItem("File2.txt", FileType.File);

            var directory1 = new FileSystemTreeItem("Directory1", FileType.Directory);
            directory1.Children = new List<FileSystemTreeItem> { file1, file2 };

            var directory2 = new FileSystemTreeItem("Directory2", FileType.Directory);
            directory2.Children = new List<FileSystemTreeItem> { directory1 };

            var rootNode = new FileSystemTreeItem("Root", FileType.Directory);
            rootNode.Children = new List<FileSystemTreeItem> { directory2 };

            // Arrange output
            var expectedOutput = "Root (Directory)\n";
            expectedOutput += "  Directory2 (Directory)\n";
            expectedOutput += "    Directory1 (Directory)\n";
            expectedOutput += "      File1.txt (File)\n";
            expectedOutput += "      File2.txt (File)\n";

            // Arrange console redirect
            var consoleWriter = new StringWriter();
            Console.SetOut(consoleWriter);

            // Act
            Program.OutputFileSystemTreeLevel(0, rootNode);
            string consoleOutput = consoleWriter.ToString().Trim();

            // Assert
            Assert.AreEqual(expectedOutput, consoleOutput);
        }

        [Test]
        public void TestOutputFileSystemTreeLevel_EmptyDirectory()
        {
            // Arrange
            var directory = new FileSystemTreeItem("EmptyDirectory", FileType.Directory);

            // Arrange output
            var expectedOutput = "EmptyDirectory (Directory)";

            // Arrange console redirect
            var consoleWriter = new StringWriter();
            Console.SetOut(consoleWriter);

            // Act
            Program.OutputFileSystemTreeLevel(0, directory);
            string consoleOutput = consoleWriter.ToString().Trim();

            // Assert
            Assert.AreEqual(expectedOutput, consoleOutput);
        }
    }
}
