// ********RoostGPT********
// Test generated by RoostGPT for test csharp-testing using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using LunarDoggo.FileSystemTree;

namespace LunarDoggo.FileSystemTree.Test
{
    [TestFixture]
    public class OutputFileSystemTreeLevel_1127e4e443
    {
        [Test]
        public void OutputFileSystemTreeLevel_WithNoChildren_ShouldOutputIndentedItemNameAndType()
        {
            // Arrange
            var item = new FileSystemTreeItem { Name = "TestItem", Type = "FileType" };
            var expectedOutput = "  TestItem (FileType)";
            string actualOutput = null;
            Console.SetOut(new System.IO.StringWriter(actualOutput));

            // Act
            Program.OutputFileSystemTreeLevel(1, item);

            // Assert
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [Test]
        public void OutputFileSystemTreeLevel_WithChildren_ShouldOutputIndentedItemAndChildrenNamesAndTypes()
        {
            // Arrange
            var childItem = new FileSystemTreeItem { Name = "ChildItem", Type = "FileType" };
            var item = new FileSystemTreeItem { Name = "TestItem", Type = "FileType", Children = new List<FileSystemTreeItem> { childItem } };
            var expectedOutput = "  TestItem (FileType)\n    ChildItem (FileType)";
            string actualOutput = null;
            Console.SetOut(new System.IO.StringWriter(actualOutput));

            // Act
            Program.OutputFileSystemTreeLevel(1, item);

            // Assert
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [Test]
        public void OutputFileSystemTreeLevel_WithNullChildren_ShouldOutputIndentedItemNameAndType()
        {
            // Arrange
            var item = new FileSystemTreeItem { Name = "TestItem", Type = "FileType", Children = null };
            var expectedOutput = "  TestItem (FileType)";
            string actualOutput = null;
            Console.SetOut(new System.IO.StringWriter(actualOutput));

            // Act
            Program.OutputFileSystemTreeLevel(1, item);

            // Assert
            Assert.AreEqual(expectedOutput, actualOutput);
        }
    }
}
