// ********RoostGPT********
// Test generated by RoostGPT for test csharp-testing using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using NUnit.Framework;
using System.IO;
using System;
using System.Linq;
using System.Collections.Generic;
using LunarDoggo.QuizGame.IO;

namespace LunarDoggo.QuizGame.IO.Test
{
    [TestFixture]
    public class DeserializeQuestions_e19f50e5a6
    {
        private string testFilePath = "testFile.json"; // TODO: Change this to the path of your test file

        [SetUp]
        public void Setup()
        {
            // Prepare the system for tests
            // TODO: Write some test data to the file
            File.WriteAllText(testFilePath, "[{\"Question\": \"What is the capital of France?\", \"Answers\": [{\"Answer\": \"Paris\", \"IsCorrect\": true}]}]");
        }

        [Test]
        public void DeserializeQuestions_FileExists_ReturnsQuestions()
        {
            // Arrange
            FileQuizQuestionSerializer fileQuizQuestionSerializer = new FileQuizQuestionSerializer(testFilePath);

            // Act
            IEnumerable<QuizQuestion> questions = fileQuizQuestionSerializer.DeserializeQuestions();

            // Assert
            Assert.IsNotNull(questions);
            Assert.AreEqual(1, questions.Count());
            Assert.AreEqual("What is the capital of France?", questions.First().Question);
            Assert.AreEqual("Paris", questions.First().Answers.First().Answer);
        }

        [Test]
        public void DeserializeQuestions_FileDoesNotExist_ReturnsEmpty()
        {
            // Arrange
            FileQuizQuestionSerializer fileQuizQuestionSerializer = new FileQuizQuestionSerializer("nonexistent.json");

            // Act
            IEnumerable<QuizQuestion> questions = fileQuizQuestionSerializer.DeserializeQuestions();

            // Assert
            Assert.IsNotNull(questions);
            Assert.AreEqual(0, questions.Count());
        }

        [TearDown]
        public void Teardown()
        {
            // Clean up any resources (e.g., file handles, network connections) used during testing
            if (File.Exists(testFilePath))
            {
                File.Delete(testFilePath);
            }
        }
    }
}
