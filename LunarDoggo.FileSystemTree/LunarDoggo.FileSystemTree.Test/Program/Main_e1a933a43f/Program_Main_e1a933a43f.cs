// Test generated by RoostGPT for test roost-test using AI Model gpt

using System;
using System.IO;
using NUnit.Framework;

namespace LunarDoggo.FileSystemTree.Tests
{
    public class TestProgram
    {
        [SetUp]
        public void Setup()
        {
        }

        [Test]
        public void TestProgram_Main_e1a933a43f()
        {
            // TODO: Set the baseDirectoryPath to an existing directory on your system
            string baseDirectoryPath = "C:\\TestDirectory";
            DirectoryInfo baseDirectory = new DirectoryInfo(baseDirectoryPath);

            // Redirect the console output to a StringWriter to capture the output
            StringWriter stringWriter = new StringWriter();
            Console.SetOut(stringWriter);

            // Call the Main method
            Program.Main(new string[0]);

            // Reset the console output
            Console.SetOut(new StreamWriter(Console.OpenStandardOutput()));

            // Get the expected output
            string expectedOutput = GetExpectedOutput(baseDirectory);

            // Assert that the expected output matches the actual output
            Assert.AreEqual(expectedOutput, stringWriter.ToString());
        }

        [Test]
        public void TestProgram_Main_InvalidDirectory()
        {
            // TODO: Set the baseDirectoryPath to a non-existing directory on your system
            string baseDirectoryPath = "C:\\NonExistingDirectory";
            DirectoryInfo baseDirectory = new DirectoryInfo(baseDirectoryPath);

            // Redirect the console output to a StringWriter to capture the output
            StringWriter stringWriter = new StringWriter();
            Console.SetOut(stringWriter);

            // Call the Main method
            Program.Main(new string[0]);

            // Reset the console output
            Console.SetOut(new StreamWriter(Console.OpenStandardOutput()));

            // Assert that an exception is thrown
            Assert.Throws<DirectoryNotFoundException>(() => GetExpectedOutput(baseDirectory));
        }

        private string GetExpectedOutput(DirectoryInfo baseDirectory)
        {
            if (!baseDirectory.Exists)
            {
                throw new DirectoryNotFoundException("The specified directory does not exist.");
            }

            FileSystemTreeItem fileSystemTree = Program.GetFileSystemTree(baseDirectory);
            StringWriter expectedOutputWriter = new StringWriter();
            OutputFileSystemTreeLevel(0, fileSystemTree, expectedOutputWriter);

            return expectedOutputWriter.ToString();
        }

        private void OutputFileSystemTreeLevel(int level, FileSystemTreeItem fileSystemTreeItem, StringWriter stringWriter)
        {
            string prefix = new string(' ', level * 2);

            stringWriter.WriteLine($"{prefix}{fileSystemTreeItem.Name}");

            foreach (var child in fileSystemTreeItem.Children)
            {
                OutputFileSystemTreeLevel(level + 1, child, stringWriter);
            }
        }
    }
}