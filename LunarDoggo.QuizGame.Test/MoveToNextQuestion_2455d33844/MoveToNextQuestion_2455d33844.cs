// ********RoostGPT********
// Test generated by RoostGPT for test csharp-testing using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using LunarDoggo.QuizGame;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class MoveToNextQuestion_2455d33844
    {
        private GameState _gameState;
        private List<QuizQuestion> _questions;

        [SetUp]
        public void SetUp()
        {
            _questions = new List<QuizQuestion>
            {
                new QuizQuestion { Question = "Question 1?", Answers = new QuizQuestionAnswer[] { new QuizQuestionAnswer { Answer = "Answer 1", IsCorrect = true }, new QuizQuestionAnswer { Answer = "Answer 2", IsCorrect = false } } },
                new QuizQuestion { Question = "Question 2?", Answers = new QuizQuestionAnswer[] { new QuizQuestionAnswer { Answer = "Answer 1", IsCorrect = false }, new QuizQuestionAnswer { Answer = "Answer 2", IsCorrect = true } } }
            };

            _gameState = new GameState(_questions);
        }

        [Test]
        public void MoveToNextQuestion_WhenThereAreUnansweredQuestions_SetsCurrentQuestion()
        {
            _gameState.MoveToNextQuestion();

            Assert.NotNull(_gameState.CurrentQuestion);
            Assert.Contains(_gameState.CurrentQuestion, _questions);
        }

        [Test]
        public void MoveToNextQuestion_WhenThereAreUnansweredQuestions_SetsHighlightedAnswerIndexToZero()
        {
            _gameState.MoveToNextQuestion();

            Assert.AreEqual(0, _gameState.HighlightedAnswer);
        }

        [Test]
        public void MoveToNextQuestion_WhenThereAreUnansweredQuestions_SetsIsCurrentQuestionAnsweredToFalse()
        {
            _gameState.MoveToNextQuestion();

            Assert.False(_gameState.IsCurrentQuestionAnswered);
        }

        [Test]
        public void MoveToNextQuestion_WhenThereAreUnansweredQuestions_SetsChosenAnswerToNull()
        {
            _gameState.MoveToNextQuestion();

            Assert.IsNull(_gameState.ChosenAnswer);
        }

        [Test]
        public void MoveToNextQuestion_WhenThereAreNoUnansweredQuestions_DoesNotChangeCurrentQuestion()
        {
            _gameState.MoveToNextQuestion();
            var currentQuestion = _gameState.CurrentQuestion;

            _gameState.MoveToNextQuestion();

            Assert.AreEqual(currentQuestion, _gameState.CurrentQuestion);
        }
    }
}
