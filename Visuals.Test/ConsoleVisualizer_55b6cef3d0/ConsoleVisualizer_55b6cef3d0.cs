// ********RoostGPT********
// Test generated by RoostGPT for test csharp-testing using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System;
using NUnit.Framework;
using LunarDoggo.QuizGame.Visuals;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class ConsoleVisualizer_55b6cef3d0
    {
        private IVisualizer _visualizer;
        
        [SetUp]
        public void SetUp()
        {
            _visualizer = new ConsoleVisualizer();
        }

        [Test]
        public void DrawAnswerStatus_CorrectAnswer_Passes()
        {
            var answer = new QuizQuestionAnswer { Answer = "Correct Answer" };
            Assert.DoesNotThrow(() => _visualizer.DrawAnswerStatus(true, answer));
        }

        [Test]
        public void DrawAnswerStatus_IncorrectAnswer_Passes()
        {
            var answer = new QuizQuestionAnswer { Answer = "Correct Answer" };
            Assert.DoesNotThrow(() => _visualizer.DrawAnswerStatus(false, answer));
        }

        [Test]
        public void DrawQuizQuestion_ValidQuestion_Passes()
        {
            var question = new QuizQuestion { Question = "Test Question", Answers = new List<QuizQuestionAnswer> { new QuizQuestionAnswer { Answer = "Test Answer", Id = Guid.NewGuid() } } };
            Assert.DoesNotThrow(() => _visualizer.DrawQuizQuestion(question, question.Answers[0].Id));
        }

        [Test]
        public void DrawQuizQuestion_NoAnswers_ThrowsException()
        {
            var question = new QuizQuestion { Question = "Test Question", Answers = new List<QuizQuestionAnswer>() };
            Assert.Throws<ArgumentException>(() => _visualizer.DrawQuizQuestion(question, Guid.NewGuid()));
        }

        [Test]
        public void DrawGameStart_ValidTotalQuestionCount_Passes()
        {
            Assert.DoesNotThrow(() => _visualizer.DrawGameStart(5));
        }

        [Test]
        public void DrawGameResult_ValidCounts_Passes()
        {
            Assert.DoesNotThrow(() => _visualizer.DrawGameResult(5, 3));
        }

        [Test]
        public void DrawNoQuestions_Passes()
        {
            Assert.DoesNotThrow(() => _visualizer.DrawNoQuestions());
        }

        [Test]
        public void DrawPlayAgain_Passes()
        {
            Assert.DoesNotThrow(() => _visualizer.DrawPlayAgain());
        }
    }
}
