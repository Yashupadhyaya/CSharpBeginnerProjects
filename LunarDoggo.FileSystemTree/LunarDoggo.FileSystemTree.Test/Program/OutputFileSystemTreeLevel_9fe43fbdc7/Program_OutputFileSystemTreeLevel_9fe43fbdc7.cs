// Test generated by RoostGPT for test test-dummy using AI Type Open AI and AI Model gpt-4

using System.Collections.Immutable;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;
using NUnit.Framework;

namespace LunarDoggo.FileSystemTree.Tests
{
    public class FileSystemTreeItem
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public ImmutableList<FileSystemTreeItem> Children { get; set; }

        public FileSystemTreeItem(string name, string type, ImmutableList<FileSystemTreeItem> children)
        {
            Name = name;
            Type = type;
            Children = children;
        }
    }

    public static class Program
    {
        public static void OutputFileSystemTreeLevel(int level, FileSystemTreeItem item)
        {
            Console.WriteLine(new string(' ', level * 2) + item.Name + " (" + item.Type + ")");
            foreach (var child in item.Children)
            {
                OutputFileSystemTreeLevel(level + 1, child);
            }
        }
    }

    [TestFixture]
    public class TestProgram_OutputFileSystemTreeLevel_9fe43fbdc7
    {
        [Test]
        public void TestWithNoChildren()
        {
            FileSystemTreeItem item = new FileSystemTreeItem("test", "file", ImmutableList<FileSystemTreeItem>.Empty);
            string expectedOutput = "test (file)\n";

            using (StringWriter sw = new StringWriter())
            {
                Console.SetOut(sw);
                Program.OutputFileSystemTreeLevel(0, item);

                string result = sw.ToString();
                Assert.AreEqual(expectedOutput, result);
            }
        }

        [Test]
        public void TestWithOneChild()
        {
            FileSystemTreeItem child = new FileSystemTreeItem("child", "file", ImmutableList<FileSystemTreeItem>.Empty);
            FileSystemTreeItem parent = new FileSystemTreeItem("parent", "directory", ImmutableList.Create(child));
            string expectedOutput = "parent (directory)\n  child (file)\n";

            using (StringWriter sw = new StringWriter())
            {
                Console.SetOut(sw);
                Program.OutputFileSystemTreeLevel(0, parent);

                string result = sw.ToString();
                Assert.AreEqual(expectedOutput, result);
            }
        }
    }
}
