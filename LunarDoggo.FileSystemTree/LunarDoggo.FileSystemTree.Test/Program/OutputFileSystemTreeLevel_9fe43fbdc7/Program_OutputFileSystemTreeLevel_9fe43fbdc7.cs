// Test generated by RoostGPT for test nunit-test using AI Model gpt

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using NUnit.Framework;

namespace LunarDoggo.FileSystemTree.Tests
{
    public class FileSystemTreeItem
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public ImmutableList<FileSystemTreeItem> Children { get; set; }
    }

    public class TestProgram_OutputFileSystemTreeLevel_9fe43fbdc7
    {
        private StringWriter _stringWriter;

        [SetUp]
        public void SetUp()
        {
            _stringWriter = new StringWriter();
            Console.SetOut(_stringWriter);
        }

        [TearDown]
        public void TearDown()
        {
            _stringWriter.Dispose();
        }

        [Test]
        public void TestOutputFileSystemTreeLevel_SingleItem()
        {
            var item = new FileSystemTreeItem
            {
                Name = "File1",
                Type = "File",
                Children = null
            };

            OutputFileSystemTreeLevel(0, item);

            string expectedOutput = "File1 (File)" + Environment.NewLine;
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        [Test]
        public void TestOutputFileSystemTreeLevel_MultipleLevels()
        {
            var item = new FileSystemTreeItem
            {
                Name = "Folder1",
                Type = "Folder",
                Children = ImmutableList.Create(
                    new FileSystemTreeItem
                    {
                        Name = "File1",
                        Type = "File",
                        Children = null
                    },
                    new FileSystemTreeItem
                    {
                        Name = "Folder2",
                        Type = "Folder",
                        Children = ImmutableList.Create(
                            new FileSystemTreeItem
                            {
                                Name = "File2",
                                Type = "File",
                                Children = null
                            }
                        )
                    }
                )
            };

            OutputFileSystemTreeLevel(0, item);

            string expectedOutput = "Folder1 (Folder)" + Environment.NewLine +
                                    "  File1 (File)" + Environment.NewLine +
                                    "  Folder2 (Folder)" + Environment.NewLine +
                                    "    File2 (File)" + Environment.NewLine;
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        private static void OutputFileSystemTreeLevel(int indentationLevel, FileSystemTreeItem item)
        {
            string indentation = new string(Enumerable.Repeat(' ', indentationLevel * 2).ToArray());
            Console.WriteLine(indentation + item.Name + " (" + item.Type + ")");

            if (item.Children != null && item.Children.Count() > 0)
            {
                foreach (FileSystemTreeItem child in item.Children)
                {
                    OutputFileSystemTreeLevel(indentationLevel + 1, child);
                }
            }
        }
    }
}