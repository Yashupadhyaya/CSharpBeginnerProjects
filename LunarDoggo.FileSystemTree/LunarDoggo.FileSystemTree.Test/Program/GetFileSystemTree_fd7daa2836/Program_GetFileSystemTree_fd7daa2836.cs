// Test generated by RoostGPT for test efghi using AI Type Open AI and AI Model gpt-4

using System.Collections.Immutable;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;
using NUnit.Framework;
using LunarDoggo.FileSystemTree;

namespace LunarDoggo.FileSystemTree.Tests
{
    public class FileSystemTreeTests
    {
        [Test]
        public void TestProgram_GetFileSystemTree_fd7daa2836()
        {
            // TODO: Replace "C:\\TestDirectory" with the path to a directory on your system
            DirectoryInfo baseDirectory = new DirectoryInfo("C:\\TestDirectory");
            FileSystemTreeItem result = Program.GetFileSystemTree(baseDirectory);

            Assert.IsNotNull(result);
            Assert.AreEqual(baseDirectory.Name, result.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);

            // TODO: Replace "SubDirectory1" with the name of a subdirectory in your test directory
            Assert.IsTrue(result.Children.Any(c => c.Name == "SubDirectory1" && c.Type == FileSystemTreeItemType.Directory));

            // TODO: Replace "TestFile1.txt" with the name of a file in your test directory
            Assert.IsTrue(result.Children.Any(c => c.Name == "TestFile1.txt" && c.Type == FileSystemTreeItemType.File));
        }

        [Test]
        public void TestProgram_GetFileSystemTree_fd7daa2836_DirectoryDoesNotExist()
        {
            // TODO: Replace "C:\\NonExistentDirectory" with the path to a non-existent directory on your system
            DirectoryInfo baseDirectory = new DirectoryInfo("C:\\NonExistentDirectory");

            var ex = Assert.Throws<DirectoryNotFoundException>(() => Program.GetFileSystemTree(baseDirectory));
            Assert.That(ex.Message, Is.EqualTo("Could not find a part of the path 'C:\\NonExistentDirectory'."));
        }
    }
}
