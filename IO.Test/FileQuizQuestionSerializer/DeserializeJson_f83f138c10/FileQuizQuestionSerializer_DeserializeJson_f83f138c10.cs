// Test generated by RoostGPT for test unt-test using AI Type Azure Open AI and AI Model roost-gpt

using System.Collections.Generic;
using System.Text.Json;
using NUnit.Framework;

[TestFixture]
public class FileQuizQuestionSerializer_DeserializeJson_f83f138c10
{
    private FileQuizQuestionSerializer serializer;

    [SetUp]
    public void SetUp()
    {
        serializer = new FileQuizQuestionSerializer();
    }

    [TestCase]
    public void DeserializeJson_WithValidContent_ReturnsQuizQuestions()
    {
        // Arrange
        string content = "[{\"id\": 1, \"question\": \"Question 1\", \"options\": [\"Option 1\", \"Option 2\"], \"correctAnswer\": 1}, {\"id\": 2, \"question\": \"Question 2\", \"options\": [\"Option 1\", \"Option 2\", \"Option 3\"], \"correctAnswer\": 2}]";

        // Act
        IEnumerable<QuizQuestion> result = serializer.DeserializeJson(content);

        // Assert
        Assert.NotNull(result);
        Assert.IsInstanceOf<IEnumerable<QuizQuestion>>(result);
        Assert.AreEqual(2, result.Count());
    }

    [TestCase]
    public void DeserializeJson_WithEmptyContent_ReturnsEmptyQuizQuestionCollection()
    {
        // Arrange
        string content = "[]";

        // Act
        IEnumerable<QuizQuestion> result = serializer.DeserializeJson(content);

        // Assert
        Assert.NotNull(result);
        Assert.IsInstanceOf<IEnumerable<QuizQuestion>>(result);
        Assert.AreEqual(0, result.Count());
    }

    [TestCase]
    public void DeserializeJson_WithInvalidContent_ThrowsException()
    {
        // Arrange
        string content = "[{\"id\": 1, \"question\": \"Question 1\", \"options\": \"Option 1\", \"correctAnswer\": 1}, {\"id\": 2, \"question\": \"Question 2\", \"options\": [\"Option 1\", \"Option 2\", \"Option 3\"], \"correctAnswer\": 2}]";

        // Act and Assert
        Assert.Throws<JsonException>(() => serializer.DeserializeJson(content));
    }

    [TestCase]
    public void DeserializeJson_WithNullContent_ReturnsNull()
    {
        // Arrange
        string content = null;

        // Act
        IEnumerable<QuizQuestion> result = serializer.DeserializeJson(content);

        // Assert
        Assert.IsNull(result);
    }
}
