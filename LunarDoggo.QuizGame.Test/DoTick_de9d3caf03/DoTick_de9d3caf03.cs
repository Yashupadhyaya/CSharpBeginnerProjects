// ********RoostGPT********
// Test generated by RoostGPT for test csharp-testing using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using NUnit.Framework;
using System.Collections.Generic;
using LunarDoggo.QuizGame;
using LunarDoggo.QuizGame.Visuals;
using System;

namespace LunarDoggo.QuizGame.Test
{
    public class DoTick_de9d3caf03
    {
        private GameLoop gameLoop;
        private Mock<IVisualizer> visualizerMock;
        private List<QuizQuestion> questions;

        [SetUp]
        public void Setup()
        {
            visualizerMock = new Mock<IVisualizer>();
            questions = new List<QuizQuestion>
            {
                new QuizQuestion 
                {
                    Text = "Question 1",
                    Answers = new List<QuizAnswer>
                    {
                        new QuizAnswer { Text = "Answer 1", IsCorrect = false },
                        new QuizAnswer { Text = "Answer 2", IsCorrect = true }
                    }
                },
                new QuizQuestion 
                {
                    Text = "Question 2",
                    Answers = new List<QuizAnswer>
                    {
                        new QuizAnswer { Text = "Answer 1", IsCorrect = false },
                        new QuizAnswer { Text = "Answer 2", IsCorrect = true }
                    }
                }
            };

            gameLoop = new GameLoop(visualizerMock.Object, questions);
        }

        [Test]
        public void DoTick_WhenGameNotFinished_UpdatesScreenAndProcessesInput()
        {
            // Arrange
            Console.SetIn(new StringReader(ConsoleKey.Enter.ToString()));

            // Act
            gameLoop.DoTick();

            // Assert
            visualizerMock.Verify(x => x.DrawGameStart(It.IsAny<int>()), Times.Once);
            visualizerMock.Verify(x => x.DrawQuizQuestion(It.IsAny<QuizQuestion>(), It.IsAny<int>()), Times.Once);
            Assert.IsFalse(gameLoop.IsFinished);
        }

        [Test]
        public void DoTick_WhenGameFinished_UpdatesScreenAndDoesNotProcessInput()
        {
            // Arrange
            Console.SetIn(new StringReader(ConsoleKey.Enter.ToString()));
            gameLoop.DoTick(); // Answer first question
            gameLoop.DoTick(); // Move to next question
            gameLoop.DoTick(); // Answer second question

            // Act
            gameLoop.DoTick(); // Try to process input when game is finished

            // Assert
            visualizerMock.Verify(x => x.DrawGameResult(It.IsAny<int>(), It.IsAny<int>()), Times.Once);
            Assert.IsTrue(gameLoop.IsFinished);
        }
    }
}
