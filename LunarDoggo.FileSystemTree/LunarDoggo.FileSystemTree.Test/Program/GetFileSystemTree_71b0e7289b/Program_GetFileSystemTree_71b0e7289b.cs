// Test generated by RoostGPT for test int-test using AI Type Open AI and AI Model gpt-3.5-turbo-0301

using System.IO;
using System.Collections.Generic;
using System.Collections.Immutable;
using NUnit.Framework;

namespace FileSystemTreeTest
{
    [TestFixture]
    public class FileSystemTreeTest
    {
        [Test]
        public void TestProgram_GetFileSystemTree_71b0e7289b()
        {
            //TODO: Change the directory path to a valid directory on your system
            string directoryPath = "C:\\Users\\User\\Documents\\TestDirectory";

            DirectoryInfo directoryInfo = new DirectoryInfo(directoryPath);

            FileSystemTreeItem expectedFileSystemTree = new FileSystemTreeItem(directoryInfo.Name, FileSystemTreeItemType.Directory, GetExpectedChildren(directoryInfo));

            FileSystemTreeItem actualFileSystemTree = Program.GetFileSystemTree(directoryInfo);

            Assert.AreEqual(expectedFileSystemTree.Name, actualFileSystemTree.Name);
            Assert.AreEqual(expectedFileSystemTree.Type, actualFileSystemTree.Type);
            Assert.AreEqual(expectedFileSystemTree.Children.Count, actualFileSystemTree.Children.Count);

            for (int i = 0; i < expectedFileSystemTree.Children.Count; i++)
            {
                FileSystemTreeItem expectedChild = expectedFileSystemTree.Children[i];
                FileSystemTreeItem actualChild = actualFileSystemTree.Children[i];

                Assert.AreEqual(expectedChild.Name, actualChild.Name);
                Assert.AreEqual(expectedChild.Type, actualChild.Type);

                if (expectedChild.Type == FileSystemTreeItemType.Directory)
                {
                    Assert.AreEqual(expectedChild.Children.Count, actualChild.Children.Count);

                    for (int j = 0; j < expectedChild.Children.Count; j++)
                    {
                        FileSystemTreeItem expectedGrandChild = expectedChild.Children[j];
                        FileSystemTreeItem actualGrandChild = actualChild.Children[j];

                        Assert.AreEqual(expectedGrandChild.Name, actualGrandChild.Name);
                        Assert.AreEqual(expectedGrandChild.Type, actualGrandChild.Type);
                        Assert.AreEqual(expectedGrandChild.Children.Count, actualGrandChild.Children.Count);
                    }
                }
            }
        }

        private ImmutableArray<FileSystemTreeItem> GetExpectedChildren(DirectoryInfo directoryInfo)
        {
            List<FileSystemTreeItem> children = new List<FileSystemTreeItem>();

            foreach (DirectoryInfo subdirectory in directoryInfo.GetDirectories())
            {
                children.Add(new FileSystemTreeItem(subdirectory.Name, FileSystemTreeItemType.Directory, GetExpectedChildren(subdirectory)));
            }

            foreach (FileInfo file in directoryInfo.GetFiles())
            {
                children.Add(new FileSystemTreeItem(file.Name, FileSystemTreeItemType.File, null));
            }

            return children.ToImmutableArray();
        }
    }

    public class FileSystemTreeItem
    {
        public string Name { get; }
        public FileSystemTreeItemType Type { get; }
        public ImmutableArray<FileSystemTreeItem> Children { get; }

        public FileSystemTreeItem(string name, FileSystemTreeItemType type, ImmutableArray<FileSystemTreeItem> children)
        {
            Name = name;
            Type = type;
            Children = children;
        }
    }

    public enum FileSystemTreeItemType
    {
        Directory,
        File
    }

    public class Program
    {
        internal static FileSystemTreeItem GetFileSystemTree(DirectoryInfo baseDirectory)
        {
            DirectoryInfo[] subdirectories = baseDirectory.GetDirectories();
            FileInfo[] files = baseDirectory.GetFiles();

            List<FileSystemTreeItem> children = new List<FileSystemTreeItem>();

            foreach (DirectoryInfo subdirectory in subdirectories)
            {
                children.Add(GetFileSystemTree(subdirectory));
            }

            foreach (FileInfo file in files)
            {
                children.Add(new FileSystemTreeItem(file.Name, FileSystemTreeItemType.File, null));
            }

            return new FileSystemTreeItem(baseDirectory.Name, FileSystemTreeItemType.Directory, children.ToImmutableArray());
        }
    }
}
