// Test generated by RoostGPT for test demo5 using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using LunarDoggo.QuizGame;
using System;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class ChangeHighlightedAnswerTests
    {
        private QuizState state;

        [SetUp]
        public void Setup()
        {
            this.state = new QuizState();
        }

        [Test]
        public void ChangeHighlightedAnswer_WhenUpAndQuestionIsNotAnswered_HighlightsPreviousAnswer()
        {
            // Arrange
            this.state.CurrentQuestion = new Question();
            this.state.IsCurrentQuestionAnswered = false;

            // Act
            this.ChangeHighlightedAnswer(true);

            // Assert
            Assert.IsTrue(this.state.PreviousAnswerHighlighted);
        }

        [Test]
        public void ChangeHighlightedAnswer_WhenNotUpAndQuestionIsNotAnswered_HighlightsNextAnswer()
        {
            // Arrange
            this.state.CurrentQuestion = new Question();
            this.state.IsCurrentQuestionAnswered = false;

            // Act
            this.ChangeHighlightedAnswer(false);

            // Assert
            Assert.IsTrue(this.state.NextAnswerHighlighted);
        }

        [Test]
        public void ChangeHighlightedAnswer_WhenQuestionIsAnswered_DoesNotChangeHighlight()
        {
            // Arrange
            this.state.CurrentQuestion = new Question();
            this.state.IsCurrentQuestionAnswered = true;
            this.state.HighlightNextAnswer();

            // Act
            this.ChangeHighlightedAnswer(true);

            // Assert
            Assert.IsTrue(this.state.NextAnswerHighlighted);
        }

        [Test]
        public void ChangeHighlightedAnswer_WhenNoCurrentQuestion_DoesNotChangeHighlight()
        {
            // Arrange
            this.state.CurrentQuestion = null;
            this.state.IsCurrentQuestionAnswered = false;
            this.state.HighlightNextAnswer();

            // Act
            this.ChangeHighlightedAnswer(true);

            // Assert
            Assert.IsTrue(this.state.NextAnswerHighlighted);
        }

        private void ChangeHighlightedAnswer(bool up)
        {
            if (this.state.CurrentQuestion != null && !this.state.IsCurrentQuestionAnswered)
            {
                if (up)
                {
                    this.state.HighlightPreviousAnswer();
                }
                else
                {
                    this.state.HighlightNextAnswer();
                }
            }
        }
    }
}
