// Test generated by RoostGPT for test test-csrepo using AI Type Open AI and AI Model gpt-4

using NUnit.Framework;
using LunarDoggo.QuizGame;
using System.Collections.Generic;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class is_AnswerQuestion_3571fff1dc
    {
        private QuizGame game;

        [SetUp]
        public void Setup()
        {
            this.game = new QuizGame();
            this.game.CurrentQuestion = new QuizQuestion
            {
                Answers = new List<QuizQuestionAnswer>
                {
                    new QuizQuestionAnswer { IsCorrect = true },
                    new QuizQuestionAnswer { IsCorrect = false }
                }
            };
            this.game.unansweredQuestions = new List<QuizQuestion> { this.game.CurrentQuestion };
            this.game.givenAnswers = new Dictionary<QuizQuestion, bool>();
        }

        [Test]
        public void AnswerQuestion_WhenCurrentQuestionExistsAndCorrectAnswerChosen_ShouldUpdateGameStateCorrectly()
        {
            this.game.highlightedAnswerIndex = 0;

            this.game.AnswerQuestion();

            Assert.IsFalse(this.game.unansweredQuestions.Contains(this.game.CurrentQuestion));
            Assert.IsTrue(this.game.givenAnswers[this.game.CurrentQuestion]);
            Assert.IsTrue(this.game.IsCurrentQuestionAnswered);
            Assert.AreEqual(this.game.ChosenAnswer, this.game.CurrentQuestion.Answers[this.game.highlightedAnswerIndex]);
        }

        [Test]
        public void AnswerQuestion_WhenCurrentQuestionExistsAndIncorrectAnswerChosen_ShouldUpdateGameStateCorrectly()
        {
            this.game.highlightedAnswerIndex = 1;

            this.game.AnswerQuestion();

            Assert.IsFalse(this.game.unansweredQuestions.Contains(this.game.CurrentQuestion));
            Assert.IsFalse(this.game.givenAnswers[this.game.CurrentQuestion]);
            Assert.IsTrue(this.game.IsCurrentQuestionAnswered);
            Assert.AreEqual(this.game.ChosenAnswer, this.game.CurrentQuestion.Answers[this.game.highlightedAnswerIndex]);
        }

        [Test]
        public void AnswerQuestion_WhenCurrentQuestionDoesNotExist_ShouldNotUpdateGameState()
        {
            this.game.CurrentQuestion = null;

            this.game.AnswerQuestion();

            Assert.AreEqual(0, this.game.givenAnswers.Count);
            Assert.IsFalse(this.game.IsCurrentQuestionAnswered);
            Assert.IsNull(this.game.ChosenAnswer);
        }
    }
}
