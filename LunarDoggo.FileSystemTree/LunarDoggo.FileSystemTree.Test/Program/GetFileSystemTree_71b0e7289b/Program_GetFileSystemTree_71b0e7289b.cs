// Test generated by RoostGPT for test int-test using AI Type Open AI and AI Model gpt-3.5-turbo-0301

using System.Collections.Immutable;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;

namespace FileSystemTree.Tests
{
    [TestClass]
    public class FileSystemTreeTests
    {
        [TestMethod]
        public void TestProgram_GetFileSystemTree_71b0e7289b()
        {
            // TODO: Change the directory path to a valid directory on your system
            DirectoryInfo baseDirectory = new DirectoryInfo(@"C:\Users\Public");

            FileSystemTreeItem tree = Program.GetFileSystemTree(baseDirectory);

            // Test that the root directory is named correctly
            Assert.AreEqual("Public", tree.Name);

            // Test that the root directory has the correct type
            Assert.AreEqual(FileSystemTreeItemType.Directory, tree.Type);

            // Test that the root directory has the correct number of children
            Assert.AreEqual(10, tree.Children.Length);

            // Test that the first child directory is named correctly
            Assert.AreEqual("Documents", tree.Children[0].Name);

            // Test that the first child directory has the correct type
            Assert.AreEqual(FileSystemTreeItemType.Directory, tree.Children[0].Type);

            // Test that the first child directory has the correct number of children
            Assert.AreEqual(4, tree.Children[0].Children.Length);

            // Test that the first child directory's first child file is named correctly
            Assert.AreEqual("desktop.ini", tree.Children[0].Children[0].Name);

            // Test that the first child directory's first child file has the correct type
            Assert.AreEqual(FileSystemTreeItemType.File, tree.Children[0].Children[0].Type);

            // Test that the first child directory's first child file has no children
            Assert.AreEqual(0, tree.Children[0].Children[0].Children.Length);
        }

        [TestMethod]
        public void TestProgram_GetFileSystemTree_71b0e7289b_InvalidDirectory()
        {
            // TODO: Change the directory path to a non-existent directory on your system
            DirectoryInfo baseDirectory = new DirectoryInfo(@"C:\NonExistentDirectory");

            try
            {
                FileSystemTreeItem tree = Program.GetFileSystemTree(baseDirectory);

                // If the method does not throw an exception, the test has failed
                Assert.Fail("Expected exception was not thrown");
            }
            catch (DirectoryNotFoundException)
            {
                // If the method throws a DirectoryNotFoundException, the test has passed
                Assert.IsTrue(true);
            }
            catch (Exception)
            {
                // If the method throws any other exception, the test has failed
                Assert.Fail("Unexpected exception was thrown");
            }
        }
    }
}
