// Test generated by RoostGPT for test efghi using AI Type Open AI and AI Model gpt-4

using System.Collections.Immutable;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;
using NUnit.Framework;
using LunarDoggo.FileSystemTree;

namespace LunarDoggo.FileSystemTree.Tests
{
    [TestFixture]
    public class ProgramTests
    {
        [Test]
        public void TestProgram_GetFileSystemTree_fd7daa2836()
        {
            // TODO: Replace with a valid directory path
            string testDirectoryPath = "C:\\Users\\User\\Documents\\TestDirectory";
            DirectoryInfo testDirectory = new DirectoryInfo(testDirectoryPath);

            FileSystemTreeItem result = Program.GetFileSystemTree(testDirectory);

            // Assert that the name of the root directory is correct
            Assert.AreEqual(testDirectory.Name, result.Name);
            Assert.AreEqual(FileSystemTreeItemType.Directory, result.Type);

            // Assert that the number of child items (files and subdirectories) is correct
            // TODO: Replace with the expected number of child items
            int expectedChildItemCount = 3;
            Assert.AreEqual(expectedChildItemCount, result.Children.Count);

            // Assert that all child items are either files or directories
            foreach (FileSystemTreeItem child in result.Children)
            {
                Assert.True(child.Type == FileSystemTreeItemType.File || child.Type == FileSystemTreeItemType.Directory);
            }
        }

        [Test]
        public void TestProgram_GetFileSystemTree_fd7daa2836_InvalidDirectory()
        {
            // TODO: Replace with an invalid directory path
            string invalidDirectoryPath = "C:\\Invalid\\Path";
            DirectoryInfo invalidDirectory = new DirectoryInfo(invalidDirectoryPath);

            Assert.Throws<DirectoryNotFoundException>(() => Program.GetFileSystemTree(invalidDirectory));
        }
    }
}
